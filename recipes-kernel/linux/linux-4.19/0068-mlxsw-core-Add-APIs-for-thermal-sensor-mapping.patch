From 0e9d69921c9a4837d29c20db401cd2ed6d5fb7fe Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Wed, 24 Feb 2021 22:28:41 +0200
Subject: [PATCH backport 4.19 1/3] mlxsw: core: Add APIs for thermal sensor
 mapping

Add APIs mlxsw_env_sensor_map_init() and mlxsw_env_sensor_map_fini(().
The purpose of the first one is to allocate and create thermal sensors
mapping for temperature sensors, presented within the main board or
line card. It obtains mapping information from the Management
Temperature Extended Capabilities Register, by specifying the relevant
device by the number of a slot at which this device is located. Slot
zero is used for the main board. The second API just free allocated
memory.
The motivation is to create dynamic mapping for gearbox thermal sensors
access.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/core_env.c | 37 ++++++++++++++++++++++++++
 drivers/net/ethernet/mellanox/mlxsw/core_env.h | 12 +++++++++
 2 files changed, 49 insertions(+)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_env.c b/drivers/net/ethernet/mellanox/mlxsw/core_env.c
index 0cc713de0f06..c36deca8d372 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_env.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_env.c
@@ -308,3 +308,40 @@ int mlxsw_env_get_module_eeprom(struct net_device *netdev,
 	return 0;
 }
 EXPORT_SYMBOL(mlxsw_env_get_module_eeprom);
+
+int mlxsw_env_sensor_map_create(struct mlxsw_core *core,
+				const struct mlxsw_bus_info *bus_info,
+				u8 slot_index,
+				struct mlxsw_env_gearbox_sensors_map *map)
+{
+	u8 sensor_map[MLXSW_REG_MTECR_SENSOR_MAP_LEN];
+	char mtecr_pl[MLXSW_REG_MTECR_LEN];
+	int err;
+
+	mlxsw_reg_mtecr_pack(mtecr_pl, slot_index);
+	err = mlxsw_reg_query(core, MLXSW_REG(mtecr), mtecr_pl);
+	if (err)
+		return err;
+
+	mlxsw_reg_mtecr_unpack(mtecr_pl, &map->sensor_count, NULL, NULL,
+			       sensor_map);
+	if (!map->sensor_count)
+		return 0;
+
+	/* Fill out sensor mapping array. */
+	map->sensor_bit_map = devm_kmemdup(bus_info->dev, sensor_map,
+					   map->sensor_count * sizeof(u16),
+					   GFP_KERNEL);
+	if (!map->sensor_bit_map)
+		return -ENOMEM;
+
+	return 0;
+}
+EXPORT_SYMBOL(mlxsw_env_sensor_map_create);
+
+void mlxsw_env_sensor_map_destroy(const struct mlxsw_bus_info *bus_info,
+				  u16 *sensor_bit_map)
+{
+	devm_kfree(bus_info->dev, sensor_bit_map);
+}
+EXPORT_SYMBOL(mlxsw_env_sensor_map_destroy);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_env.h b/drivers/net/ethernet/mellanox/mlxsw/core_env.h
index acccf90d2422..5d90ce72ddcf 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_env.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_env.h
@@ -7,6 +7,11 @@
 struct ethtool_modinfo;
 struct ethtool_eeprom;
 
+struct mlxsw_env_gearbox_sensors_map {
+	u16 sensor_count;
+	u16 *sensor_bit_map;
+};
+
 int mlxsw_env_module_temp_thresholds_get(struct mlxsw_core *core,
 					 u8 slot_index, int module, int off,
 					 int *temp);
@@ -19,4 +24,11 @@ int mlxsw_env_get_module_eeprom(struct net_device *netdev,
 				int module, struct ethtool_eeprom *ee,
 				u8 *data);
 
+int mlxsw_env_sensor_map_create(struct mlxsw_core *core,
+				const struct mlxsw_bus_info *bus_info,
+				u8 slot_index,
+				struct mlxsw_env_gearbox_sensors_map *map);
+void mlxsw_env_sensor_map_destroy(const struct mlxsw_bus_info *bus_info,
+				  u16 *sensor_bit_map);
+
 #endif
-- 
2.11.0

