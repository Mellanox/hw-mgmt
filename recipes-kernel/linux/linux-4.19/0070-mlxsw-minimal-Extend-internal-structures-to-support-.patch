From 3124b69291c8d64f30e79b4fee0c96c7840bb641 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Thu, 25 Feb 2021 00:55:38 +0200
Subject: [PATCH backport 4.19 3/3] mlxsw: minimal: Extend internal structures
 to support port areas

Introduce intermediate level for ports area. Currently all ports are
located at the main board. Port related interfaces are created during
driver initialization and removed during driver de-initialization.

For line cards in modular system the ports are to be associated with the
specific line card. Interfaces for the ports found on line card should
be created whenever new line card is available (inserted, validated,
powered, enabled and activated) and removed, when line card is getting
unavailable.

The ports found on the line card #n are accessed by setting slot index
to #n, while for access to the ports found on the main board slot index
should be set to default value zero. Each ports area contains the set
of network interfaces associated with particular slot index.

Thus introduction of ports area allows to use the same APIs for the main
board and line cards, by setting slot index argument.

Extend mlxsw_m_port_create() with 'slot_index' argument. The purpose is
to associate line card slot location with the ports found on this line
card.

For main board it'll always be zero, for line cards it'll be set to the
physical slot number at which line card is located. For now the slot
index is always 0.
That is, ports are still not instantiated from line cards.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/minimal.c | 103 ++++++++++++++++----------
 1 file changed, 62 insertions(+), 41 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/minimal.c b/drivers/net/ethernet/mellanox/mlxsw/minimal.c
index 9379750bfea2..1623f827f36e 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/minimal.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/minimal.c
@@ -21,19 +21,25 @@ static const char mlxsw_m_driver_name[] = "mlxsw_minimal";
 #define MLXSW_M_FWREV_SUBMINOR	1886
 
 struct mlxsw_m_port;
+struct mlxsw_m_area;
 
 struct mlxsw_m {
-	struct mlxsw_m_port **ports;
-	int *module_to_port;
 	struct mlxsw_core *core;
 	const struct mlxsw_bus_info *bus_info;
 	u8 base_mac[ETH_ALEN];
+	struct mlxsw_m_area *main;
+};
+
+struct mlxsw_m_area {
+	struct mlxsw_m *mlxsw_m;
+	struct mlxsw_m_port **ports;
+	int *module_to_port;
 	u8 max_ports;
 };
 
 struct mlxsw_m_port {
 	struct net_device *dev;
-	struct mlxsw_m *mlxsw_m;
+	struct mlxsw_m_area *mlxsw_m_area;
 	u8 slot_index;
 	u8 local_port;
 	u8 module;
@@ -53,7 +59,8 @@ static void mlxsw_m_module_get_drvinfo(struct net_device *dev,
 				       struct ethtool_drvinfo *drvinfo)
 {
 	struct mlxsw_m_port *mlxsw_m_port = netdev_priv(dev);
-	struct mlxsw_m *mlxsw_m = mlxsw_m_port->mlxsw_m;
+	struct mlxsw_m_area *mlxsw_m_area = mlxsw_m_port->mlxsw_m_area;
+	struct mlxsw_m *mlxsw_m = mlxsw_m_area->mlxsw_m;
 
 	strlcpy(drvinfo->driver, mlxsw_m->bus_info->device_kind,
 		sizeof(drvinfo->driver));
@@ -70,7 +77,8 @@ static int mlxsw_m_get_module_info(struct net_device *netdev,
 				   struct ethtool_modinfo *modinfo)
 {
 	struct mlxsw_m_port *mlxsw_m_port = netdev_priv(netdev);
-	struct mlxsw_core *core = mlxsw_m_port->mlxsw_m->core;
+	struct mlxsw_m_area *mlxsw_m_area = mlxsw_m_port->mlxsw_m_area;
+	struct mlxsw_core *core = mlxsw_m_area->mlxsw_m->core;
 
 	return mlxsw_env_get_module_info(core, mlxsw_m_port->slot_index,
 					 mlxsw_m_port->module, modinfo);
@@ -81,7 +89,8 @@ mlxsw_m_get_module_eeprom(struct net_device *netdev, struct ethtool_eeprom *ee,
 			  u8 *data)
 {
 	struct mlxsw_m_port *mlxsw_m_port = netdev_priv(netdev);
-	struct mlxsw_core *core = mlxsw_m_port->mlxsw_m->core;
+	struct mlxsw_m_area *mlxsw_m_area = mlxsw_m_port->mlxsw_m_area;
+	struct mlxsw_core *core = mlxsw_m_area->mlxsw_m->core;
 
 	return mlxsw_env_get_module_eeprom(netdev, core, mlxsw_m_port->slot_index,
 					   mlxsw_m_port->module, ee, data);
@@ -96,7 +105,8 @@ static const struct ethtool_ops mlxsw_m_port_ethtool_ops = {
 static int
 mlxsw_m_port_dev_addr_get(struct mlxsw_m_port *mlxsw_m_port)
 {
-	struct mlxsw_m *mlxsw_m = mlxsw_m_port->mlxsw_m;
+	struct mlxsw_m_area *mlxsw_m_area = mlxsw_m_port->mlxsw_m_area;
+	struct mlxsw_m *mlxsw_m = mlxsw_m_area->mlxsw_m;
 	struct net_device *dev = mlxsw_m_port->dev;
 	char ppad_pl[MLXSW_REG_PPAD_LEN];
 	int err;
@@ -142,8 +152,10 @@ static int mlxsw_m_fw_rev_validate(struct mlxsw_m *mlxsw_m)
 }
 
 static int
-mlxsw_m_port_create(struct mlxsw_m *mlxsw_m, u8 local_port, u8 module)
+mlxsw_m_port_create(struct mlxsw_m_area *mlxsw_m_area, u8 slot_index,
+		    u8 local_port, u8 module)
 {
+	struct mlxsw_m *mlxsw_m = mlxsw_m_area->mlxsw_m;
 	struct mlxsw_m_port *mlxsw_m_port;
 	struct net_device *dev;
 	int err;
@@ -164,7 +176,8 @@ mlxsw_m_port_create(struct mlxsw_m *mlxsw_m, u8 local_port, u8 module)
 	SET_NETDEV_DEV(dev, mlxsw_m->bus_info->dev);
 	mlxsw_m_port = netdev_priv(dev);
 	mlxsw_m_port->dev = dev;
-	mlxsw_m_port->mlxsw_m = mlxsw_m;
+	mlxsw_m_port->mlxsw_m_area = mlxsw_m_area;
+	mlxsw_m_port->slot_index = slot_index;
 	mlxsw_m_port->local_port = module;
 	mlxsw_m_port->module = module;
 
@@ -180,7 +193,7 @@ mlxsw_m_port_create(struct mlxsw_m *mlxsw_m, u8 local_port, u8 module)
 
 	netif_carrier_off(dev);
 	mlxsw_m_port_switchdev_init(mlxsw_m_port);
-	mlxsw_m->ports[local_port] = mlxsw_m_port;
+	mlxsw_m_area->ports[local_port] = mlxsw_m_port;
 	err = register_netdev(dev);
 	if (err) {
 		dev_err(mlxsw_m->bus_info->dev, "Port %d: Failed to register netdev\n",
@@ -191,7 +204,7 @@ mlxsw_m_port_create(struct mlxsw_m *mlxsw_m, u8 local_port, u8 module)
 	return 0;
 
 err_register_netdev:
-	mlxsw_m->ports[local_port] = NULL;
+	mlxsw_m_area->ports[local_port] = NULL;
 	mlxsw_m_port_switchdev_fini(mlxsw_m_port);
 	free_netdev(dev);
 err_dev_addr_get:
@@ -200,51 +213,53 @@ err_alloc_etherdev:
 	return err;
 }
 
-static void mlxsw_m_port_remove(struct mlxsw_m *mlxsw_m, u8 local_port)
+static void mlxsw_m_port_remove(struct mlxsw_m_area *mlxsw_m_area, u8 local_port)
 {
-	struct mlxsw_m_port *mlxsw_m_port = mlxsw_m->ports[local_port];
+	struct mlxsw_m_port *mlxsw_m_port = mlxsw_m_area->ports[local_port];
+	struct mlxsw_m *mlxsw_m = mlxsw_m_area->mlxsw_m;
 
 	mlxsw_core_port_clear(mlxsw_m->core, local_port, mlxsw_m);
 	unregister_netdev(mlxsw_m_port->dev); /* This calls ndo_stop */
-	mlxsw_m->ports[local_port] = NULL;
+	mlxsw_m_area->ports[local_port] = NULL;
 	mlxsw_m_port_switchdev_fini(mlxsw_m_port);
 	free_netdev(mlxsw_m_port->dev);
 	mlxsw_core_port_fini(mlxsw_m->core, local_port);
 }
 
-static int mlxsw_m_ports_create(struct mlxsw_m *mlxsw_m)
+static int mlxsw_m_ports_create(struct mlxsw_m_area *mlxsw_m_area, u8 slot_index)
 {
 	char mgpir_pl[MLXSW_REG_MGPIR_LEN];
-	int i;
-	int err;
+	int i, err;
 
-	mlxsw_reg_mgpir_pack(mgpir_pl, 0);
-	err = mlxsw_reg_query(mlxsw_m->core, MLXSW_REG(mgpir), mgpir_pl);
+	mlxsw_reg_mgpir_pack(mgpir_pl, slot_index);
+	err = mlxsw_reg_query(mlxsw_m_area->mlxsw_m->core, MLXSW_REG(mgpir),
+			      mgpir_pl);
 	if (err)
 		return err;
 
 	mlxsw_reg_mgpir_unpack(mgpir_pl, NULL, NULL, NULL,
-			       &mlxsw_m->max_ports, NULL);
-	if (!mlxsw_m->max_ports)
+			       &mlxsw_m_area->max_ports, NULL);
+
+	if (!mlxsw_m_area->max_ports)
 		return 0;
 
-	mlxsw_m->ports = kcalloc(mlxsw_m->max_ports, sizeof(*mlxsw_m->ports),
-				 GFP_KERNEL);
-	if (!mlxsw_m->ports)
+	mlxsw_m_area->ports = kcalloc(mlxsw_m_area->max_ports,
+				      sizeof(*mlxsw_m_area->ports), GFP_KERNEL);
+	if (!mlxsw_m_area->ports)
 		return -ENOMEM;
 
-	mlxsw_m->module_to_port = kmalloc_array(mlxsw_m->max_ports, sizeof(int),
-						GFP_KERNEL);
-	if (!mlxsw_m->module_to_port) {
+	mlxsw_m_area->module_to_port = kmalloc_array(mlxsw_m_area->max_ports,
+						     sizeof(int), GFP_KERNEL);
+	if (!mlxsw_m_area->module_to_port) {
 		err = -ENOMEM;
 		goto err_module_to_port_alloc;
 	}
 
 	/* Create port objects for each valid entry */
-	for (i = 0; i < mlxsw_m->max_ports; i++) {
-		mlxsw_m->module_to_port[i] = i;
-		err = mlxsw_m_port_create(mlxsw_m, mlxsw_m->module_to_port[i],
-					  i);
+	for (i = 0; i < mlxsw_m_area->max_ports; i++) {
+		mlxsw_m_area->module_to_port[i] = i;
+		err = mlxsw_m_port_create(mlxsw_m_area, slot_index,
+					  mlxsw_m_area->module_to_port[i], i);
 		if (err)
 			goto err_module_to_port_create;
 	}
@@ -253,22 +268,23 @@ static int mlxsw_m_ports_create(struct mlxsw_m *mlxsw_m)
 
 err_module_to_port_create:
 	for (i--; i >= 0; i--)
-		mlxsw_m_port_remove(mlxsw_m, mlxsw_m->module_to_port[i]);
-	kfree(mlxsw_m->module_to_port);
+		mlxsw_m_port_remove(mlxsw_m_area,
+				    mlxsw_m_area->module_to_port[i]);
+	kfree(mlxsw_m_area->module_to_port);
 err_module_to_port_alloc:
-	kfree(mlxsw_m->ports);
+	kfree(mlxsw_m_area->ports);
 	return err;
 }
 
-static void mlxsw_m_ports_remove(struct mlxsw_m *mlxsw_m)
+static void mlxsw_m_ports_remove(struct mlxsw_m_area *mlxsw_m_area)
 {
 	int i;
 
-	for (i = 0; i < mlxsw_m->max_ports; i++)
-		mlxsw_m_port_remove(mlxsw_m, mlxsw_m->module_to_port[i]);
+	for (i = 0; i < mlxsw_m_area->max_ports; i++)
+		mlxsw_m_port_remove(mlxsw_m_area, mlxsw_m_area->module_to_port[i]);
 
-	kfree(mlxsw_m->module_to_port);
-	kfree(mlxsw_m->ports);
+	kfree(mlxsw_m_area->module_to_port);
+	kfree(mlxsw_m_area->ports);
 }
 
 static int mlxsw_m_init(struct mlxsw_core *mlxsw_core,
@@ -277,14 +293,19 @@ static int mlxsw_m_init(struct mlxsw_core *mlxsw_core,
 	struct mlxsw_m *mlxsw_m = mlxsw_core_driver_priv(mlxsw_core);
 	int err;
 
+	mlxsw_m->main = kzalloc(sizeof(*mlxsw_m->main), GFP_KERNEL);
+	if (!mlxsw_m->main)
+		return -ENOMEM;
+
 	mlxsw_m->core = mlxsw_core;
 	mlxsw_m->bus_info = mlxsw_bus_info;
+	mlxsw_m->main->mlxsw_m = mlxsw_m;
 
 	err = mlxsw_m_fw_rev_validate(mlxsw_m);
 	if (err)
 		return err;
 
-	err = mlxsw_m_ports_create(mlxsw_m);
+	err = mlxsw_m_ports_create(mlxsw_m->main, 0);
 	if (err) {
 		dev_err(mlxsw_m->bus_info->dev, "Failed to create ports\n");
 		return err;
@@ -297,7 +318,7 @@ static void mlxsw_m_fini(struct mlxsw_core *mlxsw_core)
 {
 	struct mlxsw_m *mlxsw_m = mlxsw_core_driver_priv(mlxsw_core);
 
-	mlxsw_m_ports_remove(mlxsw_m);
+	mlxsw_m_ports_remove(mlxsw_m->main);
 }
 
 static const struct mlxsw_config_profile mlxsw_m_config_profile;
-- 
2.11.0

