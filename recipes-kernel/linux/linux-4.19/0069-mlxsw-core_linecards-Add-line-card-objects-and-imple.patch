From 2559ab33264c3219a7ba81df8818296a292d3cd7 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Wed, 24 Feb 2021 22:30:19 +0200
Subject: [PATCH backport 4.19 2/3] mlxsw: core_linecards: Add line card
 objects and implement infrastructure

Introduce objects for line cards and an infrastructure around that.

Implement line card activation process allowing  to process events
generated upon line card getting "ready" and "active".

Introduce ops for got_active/got_inactive callbacks infrastructure
allowing the core to register set of ops which are called whenever
line card gets active of inactive.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/Makefile       |   3 +-
 drivers/net/ethernet/mellanox/mlxsw/core.c         |  23 ++
 drivers/net/ethernet/mellanox/mlxsw/core.h         |  51 +++
 .../net/ethernet/mellanox/mlxsw/core_linecards.c   | 350 +++++++++++++++++++++
 4 files changed, 426 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/ethernet/mellanox/mlxsw/core_linecards.c

diff --git a/drivers/net/ethernet/mellanox/mlxsw/Makefile b/drivers/net/ethernet/mellanox/mlxsw/Makefile
index da75f6155264..0b816bbbb206 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/Makefile
+++ b/drivers/net/ethernet/mellanox/mlxsw/Makefile
@@ -1,7 +1,8 @@
 # SPDX-License-Identifier: GPL-2.0
 obj-$(CONFIG_MLXSW_CORE)	+= mlxsw_core.o
 mlxsw_core-objs			:= core.o core_acl_flex_keys.o \
-				   core_acl_flex_actions.o core_env.o
+				   core_acl_flex_actions.o core_env.o \
+				   core_linecards.o
 mlxsw_core-$(CONFIG_MLXSW_CORE_HWMON) += core_hwmon.o
 mlxsw_core-$(CONFIG_MLXSW_CORE_THERMAL) += core_thermal.o
 mlxsw_core-$(CONFIG_MLXSW_CORE_QSFP) += qsfp_sysfs.o
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.c b/drivers/net/ethernet/mellanox/mlxsw/core.c
index e2faedc84beb..ed34c54bf71e 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@ -78,6 +78,7 @@ struct mlxsw_core {
 	struct mlxsw_res res;
 	struct mlxsw_hwmon *hwmon;
 	struct mlxsw_thermal *thermal;
+	struct mlxsw_linecards *linecards;
 	struct mlxsw_qsfp *qsfp;
 	struct mlxsw_core_port *ports;
 	unsigned int max_ports;
@@ -87,6 +88,12 @@ struct mlxsw_core {
 	/* driver_priv has to be always the last item */
 };
 
+struct mlxsw_linecards *mlxsw_core_linecards(struct mlxsw_core *mlxsw_core)
+{
+	return mlxsw_core->linecards;
+}
+EXPORT_SYMBOL(mlxsw_core_linecards);
+
 #define MLXSW_PORT_MAX_PORTS_DEFAULT	0x40
 
 static int mlxsw_ports_init(struct mlxsw_core *mlxsw_core)
@@ -1047,6 +1054,10 @@ int mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 			goto err_devlink_register;
 	}
 
+	err = mlxsw_linecards_init(mlxsw_core, &mlxsw_core->linecards);
+	if (err)
+		goto err_linecards_init;
+
 	if (mlxsw_driver->init) {
 		err = mlxsw_driver->init(mlxsw_core, mlxsw_bus_info);
 		if (err)
@@ -1059,6 +1070,10 @@ int mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 			goto err_register_params;
 	}
 
+	err = mlxsw_linecards_post_init(mlxsw_core, mlxsw_core->linecards);
+	if (err)
+		goto err_linecards_post_init;
+
 	err = mlxsw_hwmon_init(mlxsw_core, mlxsw_bus_info, &mlxsw_core->hwmon);
 	if (err)
 		goto err_hwmon_init;
@@ -1080,10 +1095,16 @@ err_qsfp_init:
 err_thermal_init:
 	mlxsw_hwmon_fini(mlxsw_core->hwmon);
 err_hwmon_init:
+	mlxsw_linecards_pre_fini(mlxsw_core, mlxsw_core->linecards);
+err_linecards_post_init:
 	if (mlxsw_driver->params_unregister && !reload)
 		mlxsw_driver->params_unregister(mlxsw_core);
 err_register_params:
+	if (mlxsw_core->driver->fini)
+		mlxsw_core->driver->fini(mlxsw_core);
 err_driver_init:
+	mlxsw_linecards_fini(mlxsw_core, mlxsw_core->linecards);
+err_linecards_init:
 	if (!reload)
 		devlink_unregister(devlink);
 err_devlink_register:
@@ -1123,12 +1144,14 @@ void mlxsw_core_bus_device_unregister(struct mlxsw_core *mlxsw_core,
 	mlxsw_qsfp_fini(mlxsw_core->qsfp);
 	mlxsw_thermal_fini(mlxsw_core->thermal);
 	mlxsw_hwmon_fini(mlxsw_core->hwmon);
+	mlxsw_linecards_pre_fini(mlxsw_core, mlxsw_core->linecards);
 	if (mlxsw_core->driver->fini)
 		mlxsw_core->driver->fini(mlxsw_core);
 	if (mlxsw_core->driver->params_unregister && !reload)
 		mlxsw_core->driver->params_unregister(mlxsw_core);
 	if (!reload)
 		devlink_unregister(devlink);
+	mlxsw_linecards_fini(mlxsw_core, mlxsw_core->linecards);
 	mlxsw_emad_fini(mlxsw_core);
 	kfree(mlxsw_core->lag.mapping);
 	mlxsw_ports_fini(mlxsw_core);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.h b/drivers/net/ethernet/mellanox/mlxsw/core.h
index 3fb3a757a114..dd7726f1546f 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.h
@@ -28,6 +28,8 @@ unsigned int mlxsw_core_max_ports(const struct mlxsw_core *mlxsw_core);
 
 void *mlxsw_core_driver_priv(struct mlxsw_core *mlxsw_core);
 
+struct mlxsw_linecards *mlxsw_core_linecards(struct mlxsw_core *mlxsw_core);
+
 bool mlxsw_core_res_query_enabled(const struct mlxsw_core *mlxsw_core);
 
 int mlxsw_core_driver_register(struct mlxsw_driver *mlxsw_driver);
@@ -404,6 +406,55 @@ enum mlxsw_devlink_param_id {
 	MLXSW_DEVLINK_PARAM_ID_ACL_REGION_REHASH_INTERVAL,
 };
 
+struct mlxsw_linecard {
+	u8 slot_index;
+	struct mlxsw_linecards *linecards;
+	struct devlink_linecard *devlink_linecard;
+	bool provisioned;
+	bool ready;
+	bool active;
+};
+
+struct mlxsw_linecards {
+	struct list_head event_ops_list;
+	struct mlxsw_core *mlxsw_core;
+	u8 count;
+	struct mlxsw_linecard linecards[0];
+};
+
+static inline struct mlxsw_linecard *
+mlxsw_linecard_get(struct mlxsw_linecards *linecards, u8 slot_index)
+{
+	return &linecards->linecards[slot_index - 1];
+}
+
+int mlxsw_linecards_init(struct mlxsw_core *mlxsw_core,
+			 struct mlxsw_linecards **p_linecards);
+int mlxsw_linecards_post_init(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards);
+void mlxsw_linecards_pre_fini(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards);
+void mlxsw_linecards_fini(struct mlxsw_core *mlxsw_core,
+			  struct mlxsw_linecards *linecards);
+int mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
+				  const char *mddq_pl);
+
+struct mlxsw_linecards_event_ops {
+	void (*got_active)(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			   const struct mlxsw_linecard *linecard,
+			   void *priv);
+	void (*got_inactive)(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			     const struct mlxsw_linecard *linecard,
+			     void *priv);
+};
+
+int mlxsw_linecards_event_ops_register(struct mlxsw_core *mlxsw_core,
+				       struct mlxsw_linecards_event_ops *ops,
+				       void *priv);
+void mlxsw_linecards_event_ops_unregister(struct mlxsw_core *mlxsw_core,
+					  struct mlxsw_linecards_event_ops *ops,
+					  void *priv);
+
 struct mlxsw_qsfp;
 
 #ifdef CONFIG_MLXSW_CORE_QSFP
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c b/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
new file mode 100644
index 000000000000..68c82c301bce
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
@@ -0,0 +1,350 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/* Copyright (c) 2021 Mellanox Technologies. All rights reserved */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#include <linux/gfp.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+
+#include "core.h"
+
+struct mlxsw_linecards_event_ops_item {
+	struct list_head list;
+	struct mlxsw_linecards_event_ops *event_ops;
+	void *priv;
+};
+
+static int mlxsw_linecard_activate(struct mlxsw_core *mlxsw_core,
+				   struct mlxsw_linecard *linecard)
+{
+	char mddc_pl[MLXSW_REG_MDDC_LEN];
+
+	mlxsw_reg_mddc_pack(mddc_pl, linecard->slot_index, true);
+	return mlxsw_reg_write(mlxsw_core, MLXSW_REG(mddc), mddc_pl);
+}
+
+static void
+mlxsw_linecard_provision_set(struct mlxsw_linecard *linecard,
+			     enum mlxsw_reg_mddq_card_type card_type)
+{
+}
+
+static void mlxsw_linecard_provision_clear(struct mlxsw_linecard *linecard)
+{
+}
+
+static void mlxsw_linecard_got_active(struct mlxsw_core *mlxsw_core,
+				      struct mlxsw_linecards *linecards,
+				      struct mlxsw_linecard *linecard)
+{
+	struct mlxsw_linecards_event_ops_item *item;
+
+	list_for_each_entry(item, &linecards->event_ops_list, list)
+		item->event_ops->got_active(mlxsw_core, linecard->slot_index,
+					    linecard, item->priv);
+}
+
+static void mlxsw_linecard_got_inactive(struct mlxsw_core *mlxsw_core,
+					struct mlxsw_linecards *linecards,
+					struct mlxsw_linecard *linecard)
+{
+	struct mlxsw_linecards_event_ops_item *item;
+
+	list_for_each_entry(item, &linecards->event_ops_list, list)
+		item->event_ops->got_inactive(mlxsw_core, linecard->slot_index,
+					      linecard, item->priv);
+}
+
+static int __mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
+					   struct mlxsw_linecards *linecards,
+					   struct mlxsw_linecard *linecard,
+					   const char *mddq_pl,
+					   bool process_provision_only)
+{
+	enum mlxsw_reg_mddq_card_type card_type;
+	u16 major_ini_file_version;
+	u16 minor_ini_file_version;
+	bool provisioned;
+	bool sr_valid;
+	u8 slot_index;
+	bool active;
+	bool ready;
+
+	mlxsw_reg_mddq_slot_info_unpack(mddq_pl, &slot_index, &provisioned,
+					&sr_valid, &ready, &active,
+					&major_ini_file_version,
+					&minor_ini_file_version, &card_type);
+
+	if (linecard) {
+		if (slot_index != linecard->slot_index)
+			return -EINVAL;
+	} else {
+		if (slot_index > linecards->count)
+			return -EINVAL;
+		linecard = mlxsw_linecard_get(linecards, slot_index);
+	}
+
+	if (linecard->provisioned != provisioned) {
+		if (provisioned)
+			mlxsw_linecard_provision_set(linecard, card_type);
+		else
+			mlxsw_linecard_provision_clear(linecard);
+		linecard->provisioned = provisioned;
+	}
+	if (process_provision_only)
+		return 0;
+	if (linecard->ready != ready) {
+		if (ready) {
+			int err;
+
+			err = mlxsw_linecard_activate(mlxsw_core, linecard);
+			if (err)
+				return err;
+		}
+		linecard->ready = ready;
+	}
+	if (linecard->active != active) {
+		if (active)
+			mlxsw_linecard_got_active(mlxsw_core,
+						  linecards, linecard);
+		else
+			mlxsw_linecard_got_inactive(mlxsw_core,
+						    linecards, linecard);
+		linecard->active = active;
+	}
+	return 0;
+}
+int mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
+				  const char *mddq_pl)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+
+	return __mlxsw_linecard_status_process(mlxsw_core, linecards, NULL,
+					       mddq_pl, false);
+}
+EXPORT_SYMBOL(mlxsw_linecard_status_process);
+
+static int mlxsw_linecard_status_get_and_process(struct mlxsw_core *mlxsw_core,
+						 struct mlxsw_linecard *linecard,
+						 bool process_provision_only)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+	char mddq_pl[MLXSW_REG_MDDQ_LEN];
+	int err;
+
+	mlxsw_reg_mddq_pack(mddq_pl, linecard->slot_index, false,
+			    MLXSW_REG_MDDQ_QUERY_TYPE_SLOT_INFO);
+	err = mlxsw_reg_query(mlxsw_core, MLXSW_REG(mddq), mddq_pl);
+	if (err)
+		return err;
+
+	return __mlxsw_linecard_status_process(mlxsw_core, linecards, linecard,
+					       mddq_pl, process_provision_only);
+}
+
+static int mlxsw_linecard_init(struct mlxsw_core *mlxsw_core,
+			       struct mlxsw_linecards *linecards,
+			       u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+	int err;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+	linecard->slot_index = slot_index;
+	linecard->linecards = linecards;
+
+	err = mlxsw_linecard_status_get_and_process(mlxsw_core, linecard, true);
+	if (err)
+		goto err_status_get_and_process;
+
+	return 0;
+
+err_status_get_and_process:
+	return err;
+}
+
+static int mlxsw_linecard_event_delivery_set(struct mlxsw_core *mlxsw_core,
+					     struct mlxsw_linecard *linecard,
+					     bool enable)
+{
+	char mddq_pl[MLXSW_REG_MDDQ_LEN];
+
+	mlxsw_reg_mddq_pack(mddq_pl, linecard->slot_index, enable,
+			    MLXSW_REG_MDDQ_QUERY_TYPE_SLOT_INFO);
+	return mlxsw_reg_write(mlxsw_core, MLXSW_REG(mddq), mddq_pl);
+}
+
+static int mlxsw_linecard_post_init(struct mlxsw_core *mlxsw_core,
+				    struct mlxsw_linecards *linecards,
+				    u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+	int err;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+	linecard->slot_index = slot_index;
+
+	err = mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, true);
+	if (err)
+		return err;
+
+	err = mlxsw_linecard_status_get_and_process(mlxsw_core, linecard,
+						    false);
+	if (err)
+		goto err_status_get_and_process;
+
+	return 0;
+
+err_status_get_and_process:
+	mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, false);
+	return err;
+}
+
+static void mlxsw_linecard_pre_fini(struct mlxsw_core *mlxsw_core,
+				    struct mlxsw_linecards *linecards,
+				    u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+	mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, false);
+}
+
+static void mlxsw_linecard_fini(struct mlxsw_core *mlxsw_core,
+				struct mlxsw_linecards *linecards,
+				u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+}
+
+int mlxsw_linecards_init(struct mlxsw_core *mlxsw_core,
+			 struct mlxsw_linecards **p_linecards)
+{
+	char mgpir_pl[MLXSW_REG_MGPIR_LEN];
+	struct mlxsw_linecards *linecards;
+	u8 slot_count;
+	int err;
+	int i;
+
+	mlxsw_reg_mgpir_pack(mgpir_pl, 0);
+	err = mlxsw_reg_query(mlxsw_core, MLXSW_REG(mgpir), mgpir_pl);
+	if (err)
+		return err;
+
+	mlxsw_reg_mgpir_unpack(mgpir_pl, NULL, NULL, NULL,
+			       NULL, &slot_count);
+	if (!slot_count) {
+		*p_linecards = NULL;
+		return 0;
+	}
+
+	linecards = kzalloc(struct_size(linecards, linecards, slot_count),
+			    GFP_KERNEL);
+	if (!linecards)
+		return -ENOMEM;
+	linecards->count = slot_count;
+	linecards->mlxsw_core = mlxsw_core;
+
+	for (i = 0; i < linecards->count; i++) {
+		err = mlxsw_linecard_init(mlxsw_core, linecards, i + 1);
+		if (err)
+			goto err_linecard_init;
+	}
+
+	INIT_LIST_HEAD(&linecards->event_ops_list);
+	*p_linecards = linecards;
+
+	return 0;
+
+err_linecard_init:
+	for (i--; i >= 0; i--)
+		mlxsw_linecard_fini(mlxsw_core, linecards, i + 1);
+	kfree(linecards);
+
+	return err;
+}
+
+int mlxsw_linecards_post_init(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards)
+{
+	int err;
+	int i;
+
+	if (!linecards)
+		return 0;
+
+	for (i = 0; i < linecards->count; i++) {
+		err = mlxsw_linecard_post_init(mlxsw_core, linecards, i + 1);
+		if (err)
+			goto err_linecard_port_init;
+	}
+	return 0;
+
+err_linecard_port_init:
+	for (i--; i >= 0; i--)
+		mlxsw_linecard_pre_fini(mlxsw_core, linecards, i + 1);
+
+	return err;
+}
+
+void mlxsw_linecards_pre_fini(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards)
+{
+	int i;
+
+	if (!linecards)
+		return;
+	for (i = 0; i < linecards->count; i++)
+		mlxsw_linecard_pre_fini(mlxsw_core, linecards, i + 1);
+	/* Make sure all scheduled events are processed */
+	mlxsw_core_flush_owq();
+}
+
+void mlxsw_linecards_fini(struct mlxsw_core *mlxsw_core,
+			  struct mlxsw_linecards *linecards)
+{
+	int i;
+
+	if (!linecards)
+		return;
+	WARN_ON(!list_empty(&linecards->event_ops_list));
+	for (i = 0; i < linecards->count; i++)
+		mlxsw_linecard_fini(mlxsw_core, linecards, i + 1);
+}
+
+int mlxsw_linecards_event_ops_register(struct mlxsw_core *mlxsw_core,
+				       struct mlxsw_linecards_event_ops *ops,
+				       void *priv)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+	struct mlxsw_linecards_event_ops_item *item;
+
+	item = kzalloc(sizeof(*item), GFP_KERNEL);
+	if (!item)
+		return -ENOMEM;
+	item->event_ops = ops;
+	item->priv = priv;
+	list_add_tail(&item->list, &linecards->event_ops_list);
+	return 0;
+}
+EXPORT_SYMBOL(mlxsw_linecards_event_ops_register);
+
+void mlxsw_linecards_event_ops_unregister(struct mlxsw_core *mlxsw_core,
+					  struct mlxsw_linecards_event_ops *ops,
+					  void *priv)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+	struct mlxsw_linecards_event_ops_item *item, *tmp;
+
+	list_for_each_entry_safe(item, tmp, &linecards->event_ops_list, list) {
+		if (item->event_ops == ops && item->priv == priv)
+			list_del(&item->list);
+	}
+}
+EXPORT_SYMBOL(mlxsw_linecards_event_ops_unregister);
-- 
2.11.0

