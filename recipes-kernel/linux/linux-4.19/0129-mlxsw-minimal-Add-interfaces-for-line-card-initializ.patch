From e9b029123f1254486faf42567b33cfdd1b627e17 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Mon, 19 Jul 2021 16:49:20 +0000
Subject: [PATCH backport v4.19 104/104] mlxsw: minimal: Add interfaces for
 line card initialization and de-initialization

Add callback functions for line card 'netdevice' objects initialization
and de-initialization. Each line card is associated with the set of
'netdevices', which are created/destroyed dynamically, when line card
is getting active/inactive state.

Add APIs for line card registration and de-registration during init and
de-init.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/minimal.c | 124 ++++++++++++++++++
 1 file changed, 124 insertions(+)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/minimal.c b/drivers/net/ethernet/mellanox/mlxsw/minimal.c
index cf2a4562abc8..dffbbc9e25f4 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/minimal.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/minimal.c
@@ -328,6 +328,121 @@ static void mlxsw_m_sys_event_handler(struct mlxsw_core *mlxsw_core)
 	}
 }
 
+static int
+mlxsw_m_got_provisioned(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			const struct mlxsw_linecard *linecard, void *priv)
+{
+	struct mlxsw_m *mlxsw_m = priv;
+	struct mlxsw_m_area *lc;
+	int err;
+
+	/* Check if linecard is already provisioned. */
+	if (mlxsw_m->linecards[slot_index - 1])
+		return 0;
+
+	lc = kzalloc(sizeof(*lc), GFP_KERNEL);
+	if (!lc)
+		return -ENOMEM;
+
+	lc->mlxsw_m = mlxsw_m;
+	mlxsw_m->linecards[slot_index - 1] = lc;
+	err = mlxsw_m_ports_create(lc, slot_index);
+	if (err) {
+		dev_err(mlxsw_m->bus_info->dev, "Failed to set line card at slot %d\n",
+			slot_index);
+		goto mlxsw_m_ports_create_fail;
+	}
+
+	/* Rollback if ports are not found on line card. */
+	if (!lc->max_ports) {
+		err = -ENODEV;
+		goto mlxsw_m_ports_create_fail;
+	}
+
+	return 0;
+
+mlxsw_m_ports_create_fail:
+	kfree(lc);
+	return err;
+}
+
+static void
+mlxsw_m_got_unprovisioned(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			  const struct mlxsw_linecard *linecard, void *priv)
+{
+	struct mlxsw_m *mlxsw_m = priv;
+	struct mlxsw_m_area *lc = mlxsw_m->linecards[slot_index - 1];
+
+	if (!lc)
+		return;
+
+	mlxsw_m_ports_remove(lc);
+	kfree(lc);
+	mlxsw_m->linecards[slot_index - 1] = NULL;
+}
+
+static void
+_mlxsw_m_got_provisioned(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			 const struct mlxsw_linecard *linecard, void *priv)
+{
+	mlxsw_m_got_provisioned(mlxsw_core, slot_index, linecard, priv);
+}
+
+static struct mlxsw_linecards_event_ops mlxsw_m_event_ops = {
+	.got_active = _mlxsw_m_got_provisioned,
+	.got_inactive = mlxsw_m_got_unprovisioned,
+};
+
+static int mlxsw_m_linecards_register(struct mlxsw_m *mlxsw_m)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_m->core);
+	int err;
+
+	if (!linecards || !linecards->count)
+		return 0;
+
+	mlxsw_m->linecards = kcalloc(linecards->count,
+				     sizeof(*mlxsw_m->linecards),
+				     GFP_KERNEL);
+	if (!mlxsw_m->linecards)
+		return -ENOMEM;
+
+	err = mlxsw_linecards_event_ops_register(mlxsw_m->core,
+						 &mlxsw_m_event_ops,
+						 mlxsw_m);
+	if (err)
+		goto err_linecards_event_ops_register;
+
+	mlxsw_m->linecards_registered = 1;
+
+	return 0;
+
+err_linecards_event_ops_register:
+	kfree(mlxsw_m->linecards);
+	return err;
+}
+
+static void mlxsw_m_linecards_unregister(struct mlxsw_m *mlxsw_m)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_m->core);
+	int i;
+
+	if (!linecards || !linecards->count)
+		return;
+
+	for (i = 1; i <= linecards->count; i++) {
+		if (mlxsw_m->linecards[i - 1])
+			mlxsw_m_got_unprovisioned(mlxsw_m->core, i, NULL,
+						  mlxsw_m);
+	}
+
+	mlxsw_m->linecards_registered = 0;
+
+	mlxsw_linecards_event_ops_unregister(mlxsw_m->core,
+					     &mlxsw_m_event_ops, mlxsw_m);
+	kfree(mlxsw_m->linecards);
+}
+
 static int mlxsw_m_init(struct mlxsw_core *mlxsw_core,
 			const struct mlxsw_bus_info *mlxsw_bus_info)
 {
@@ -352,13 +467,22 @@ static int mlxsw_m_init(struct mlxsw_core *mlxsw_core,
 		return err;
 	}
 
+	err = mlxsw_m_linecards_register(mlxsw_m);
+	if (err)
+		goto err_linecards_register;
+
 	return 0;
+
+err_linecards_register:
+	mlxsw_m_ports_remove(mlxsw_m->main);
+	return err;
 }
 
 static void mlxsw_m_fini(struct mlxsw_core *mlxsw_core)
 {
 	struct mlxsw_m *mlxsw_m = mlxsw_core_driver_priv(mlxsw_core);
 
+	mlxsw_m_linecards_unregister(mlxsw_m);
 	mlxsw_m_ports_remove(mlxsw_m->main);
 }
 
-- 
2.20.1

