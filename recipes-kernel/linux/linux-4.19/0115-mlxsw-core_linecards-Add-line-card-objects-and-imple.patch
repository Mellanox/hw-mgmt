From 8c88742145d307f4d22653bd27f0785144a7a19f Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Sun, 18 Jul 2021 16:48:08 +0000
Subject: [PATCH backport v4.19 090/104] mlxsw: core_linecards: Add line card
 objects and implement infrastructure

Introduce objects for line cards and an infrastructure around that.

Implement line card activation process allowing  to process events
generated upon line card getting "ready" and "active".

Introduce ops for got_active/got_inactive callbacks infrastructure
allowing the core to register set of ops which are called whenever
line card gets active of inactive.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/Makefile  |   3 +-
 drivers/net/ethernet/mellanox/mlxsw/core.c    |  35 +-
 drivers/net/ethernet/mellanox/mlxsw/core.h    |  65 ++-
 .../ethernet/mellanox/mlxsw/core_linecards.c  | 442 ++++++++++++++++++
 drivers/net/ethernet/mellanox/mlxsw/minimal.c |   2 +-
 5 files changed, 543 insertions(+), 4 deletions(-)
 create mode 100644 drivers/net/ethernet/mellanox/mlxsw/core_linecards.c

diff --git a/drivers/net/ethernet/mellanox/mlxsw/Makefile b/drivers/net/ethernet/mellanox/mlxsw/Makefile
index da75f6155264..0b816bbbb206 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/Makefile
+++ b/drivers/net/ethernet/mellanox/mlxsw/Makefile
@@ -1,7 +1,8 @@
 # SPDX-License-Identifier: GPL-2.0
 obj-$(CONFIG_MLXSW_CORE)	+= mlxsw_core.o
 mlxsw_core-objs			:= core.o core_acl_flex_keys.o \
-				   core_acl_flex_actions.o core_env.o
+				   core_acl_flex_actions.o core_env.o \
+				   core_linecards.o
 mlxsw_core-$(CONFIG_MLXSW_CORE_HWMON) += core_hwmon.o
 mlxsw_core-$(CONFIG_MLXSW_CORE_THERMAL) += core_thermal.o
 mlxsw_core-$(CONFIG_MLXSW_CORE_QSFP) += qsfp_sysfs.o
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.c b/drivers/net/ethernet/mellanox/mlxsw/core.c
index e2faedc84beb..c1f369fd1f4b 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@ -45,6 +45,7 @@ struct mlxsw_core_port {
 	struct devlink_port devlink_port;
 	void *port_driver_priv;
 	u8 local_port;
+	struct mlxsw_linecard *linecard;
 };
 
 void *mlxsw_core_port_driver_priv(struct mlxsw_core_port *mlxsw_core_port)
@@ -78,6 +79,7 @@ struct mlxsw_core {
 	struct mlxsw_res res;
 	struct mlxsw_hwmon *hwmon;
 	struct mlxsw_thermal *thermal;
+	struct mlxsw_linecards *linecards;
 	struct mlxsw_qsfp *qsfp;
 	struct mlxsw_core_port *ports;
 	unsigned int max_ports;
@@ -87,6 +89,12 @@ struct mlxsw_core {
 	/* driver_priv has to be always the last item */
 };
 
+struct mlxsw_linecards *mlxsw_core_linecards(struct mlxsw_core *mlxsw_core)
+{
+	return mlxsw_core->linecards;
+}
+EXPORT_SYMBOL(mlxsw_core_linecards);
+
 #define MLXSW_PORT_MAX_PORTS_DEFAULT	0x40
 
 static int mlxsw_ports_init(struct mlxsw_core *mlxsw_core)
@@ -1047,6 +1055,11 @@ int mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 			goto err_devlink_register;
 	}
 
+	err = mlxsw_linecards_init(mlxsw_core, mlxsw_bus_info,
+				   &mlxsw_core->linecards);
+	if (err)
+		goto err_linecards_init;
+
 	if (mlxsw_driver->init) {
 		err = mlxsw_driver->init(mlxsw_core, mlxsw_bus_info);
 		if (err)
@@ -1073,8 +1086,14 @@ int mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 	if (err)
 		goto err_qsfp_init;
 
+	err = mlxsw_linecards_post_init(mlxsw_core, mlxsw_core->linecards);
+	if (err)
+		goto err_linecards_post_init;
+
 	return 0;
 
+err_linecards_post_init:
+	mlxsw_qsfp_fini(mlxsw_core->qsfp);
 err_qsfp_init:
 	mlxsw_thermal_fini(mlxsw_core->thermal);
 err_thermal_init:
@@ -1083,7 +1102,11 @@ err_hwmon_init:
 	if (mlxsw_driver->params_unregister && !reload)
 		mlxsw_driver->params_unregister(mlxsw_core);
 err_register_params:
+	if (mlxsw_core->driver->fini)
+		mlxsw_core->driver->fini(mlxsw_core);
 err_driver_init:
+	mlxsw_linecards_fini(mlxsw_core, mlxsw_core->linecards);
+err_linecards_init:
 	if (!reload)
 		devlink_unregister(devlink);
 err_devlink_register:
@@ -1120,6 +1143,7 @@ void mlxsw_core_bus_device_unregister(struct mlxsw_core *mlxsw_core,
 			return;
 	}
 
+	mlxsw_linecards_pre_fini(mlxsw_core, mlxsw_core->linecards);
 	mlxsw_qsfp_fini(mlxsw_core->qsfp);
 	mlxsw_thermal_fini(mlxsw_core->thermal);
 	mlxsw_hwmon_fini(mlxsw_core->hwmon);
@@ -1129,6 +1153,7 @@ void mlxsw_core_bus_device_unregister(struct mlxsw_core *mlxsw_core,
 		mlxsw_core->driver->params_unregister(mlxsw_core);
 	if (!reload)
 		devlink_unregister(devlink);
+	mlxsw_linecards_fini(mlxsw_core, mlxsw_core->linecards);
 	mlxsw_emad_fini(mlxsw_core);
 	kfree(mlxsw_core->lag.mapping);
 	mlxsw_ports_fini(mlxsw_core);
@@ -1701,7 +1726,8 @@ u64 mlxsw_core_res_get(struct mlxsw_core *mlxsw_core,
 }
 EXPORT_SYMBOL(mlxsw_core_res_get);
 
-int mlxsw_core_port_init(struct mlxsw_core *mlxsw_core, u8 local_port)
+int mlxsw_core_port_init(struct mlxsw_core *mlxsw_core, u8 local_port,
+			 u8 slot_index)
 {
 	struct devlink *devlink = priv_to_devlink(mlxsw_core);
 	struct mlxsw_core_port *mlxsw_core_port =
@@ -1710,6 +1736,13 @@ int mlxsw_core_port_init(struct mlxsw_core *mlxsw_core, u8 local_port)
 	int err;
 
 	mlxsw_core_port->local_port = local_port;
+	if (slot_index) {
+		struct mlxsw_linecard *linecard;
+
+		linecard = mlxsw_linecard_get(mlxsw_core->linecards,
+					      slot_index);
+		mlxsw_core_port->linecard = linecard;
+	}
 	err = devlink_port_register(devlink, devlink_port, local_port);
 	if (err)
 		memset(mlxsw_core_port, 0, sizeof(*mlxsw_core_port));
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.h b/drivers/net/ethernet/mellanox/mlxsw/core.h
index 3fb3a757a114..a9204c5b09ec 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.h
@@ -28,6 +28,8 @@ unsigned int mlxsw_core_max_ports(const struct mlxsw_core *mlxsw_core);
 
 void *mlxsw_core_driver_priv(struct mlxsw_core *mlxsw_core);
 
+struct mlxsw_linecards *mlxsw_core_linecards(struct mlxsw_core *mlxsw_core);
+
 bool mlxsw_core_res_query_enabled(const struct mlxsw_core *mlxsw_core);
 
 int mlxsw_core_driver_register(struct mlxsw_driver *mlxsw_driver);
@@ -166,7 +168,7 @@ void mlxsw_core_lag_mapping_clear(struct mlxsw_core *mlxsw_core,
 				  u16 lag_id, u8 local_port);
 
 void *mlxsw_core_port_driver_priv(struct mlxsw_core_port *mlxsw_core_port);
-int mlxsw_core_port_init(struct mlxsw_core *mlxsw_core, u8 local_port);
+int mlxsw_core_port_init(struct mlxsw_core *mlxsw_core, u8 slot_index, u8 local_port);
 void mlxsw_core_port_fini(struct mlxsw_core *mlxsw_core, u8 local_port);
 void mlxsw_core_port_eth_set(struct mlxsw_core *mlxsw_core, u8 local_port,
 			     void *port_driver_priv, struct net_device *dev,
@@ -404,6 +406,67 @@ enum mlxsw_devlink_param_id {
 	MLXSW_DEVLINK_PARAM_ID_ACL_REGION_REHASH_INTERVAL,
 };
 
+struct mlxsw_linecard {
+	u8 slot_index;
+	struct mlxsw_linecards *linecards;
+	struct mutex lock;
+	struct devlink_linecard *devlink_linecard;
+	bool provisioned;
+	bool ready;
+	bool active;
+	u16 hw_revision;
+	u16 ini_version;
+	struct delayed_work tmp_mddq_dw;
+};
+
+struct mlxsw_linecards {
+	struct list_head event_ops_list;
+	struct mlxsw_core *mlxsw_core;
+	const struct mlxsw_bus_info *bus_info;
+	u8 count;
+	struct mlxsw_linecard linecards[0];
+};
+
+static inline struct mlxsw_linecard *
+mlxsw_linecard_get(struct mlxsw_linecards *linecards, u8 slot_index)
+{
+	return &linecards->linecards[slot_index - 1];
+}
+
+int mlxsw_linecards_init(struct mlxsw_core *mlxsw_core,
+			 const struct mlxsw_bus_info *bus_info,
+			 struct mlxsw_linecards **p_linecards);
+int mlxsw_linecards_post_init(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards);
+void mlxsw_linecards_pre_fini(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards);
+void mlxsw_linecards_fini(struct mlxsw_core *mlxsw_core,
+			  struct mlxsw_linecards *linecards);
+int mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
+				  const char *mddq_pl);
+
+struct mlxsw_linecards_event_ops {
+	int (*got_provisioned)(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			       const struct mlxsw_linecard *linecard,
+			       void *priv);
+	void (*got_unprovisioned)(struct mlxsw_core *mlxsw_core, u8 slot_index,
+				  const struct mlxsw_linecard *linecard,
+				  void *priv);
+	void (*got_active)(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			   const struct mlxsw_linecard *linecard,
+			   void *priv);
+	void (*got_inactive)(struct mlxsw_core *mlxsw_core, u8 slot_index,
+			     const struct mlxsw_linecard *linecard,
+			     void *priv);
+};
+
+int mlxsw_linecards_event_ops_register(struct mlxsw_core *mlxsw_core,
+				       struct mlxsw_linecards_event_ops *ops,
+				       void *priv);
+void mlxsw_linecards_event_ops_unregister(struct mlxsw_core *mlxsw_core,
+					  struct mlxsw_linecards_event_ops *ops,
+					  void *priv);
+
 struct mlxsw_qsfp;
 
 #ifdef CONFIG_MLXSW_CORE_QSFP
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c b/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
new file mode 100644
index 000000000000..48d17b183fb7
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
@@ -0,0 +1,442 @@
+// SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0
+/* Copyright (c) 2021 NVIDIA Corporation and Mellanox Technologies. All rights reserved */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#include <linux/gfp.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+
+#include "core.h"
+
+struct mlxsw_linecards_event_ops_item {
+	struct list_head list;
+	struct mlxsw_linecards_event_ops *event_ops;
+	void *priv;
+};
+
+static int
+mlxsw_linecard_provision_cbs_call(struct mlxsw_core *mlxsw_core,
+				  struct mlxsw_linecards *linecards,
+				  struct mlxsw_linecard *linecard)
+{
+	struct mlxsw_linecards_event_ops_item *item;
+	int err;
+
+	list_for_each_entry(item, &linecards->event_ops_list, list) {
+		if (!item->event_ops->got_provisioned)
+			continue;
+		err = item->event_ops->got_provisioned(mlxsw_core,
+						       linecard->slot_index,
+						       linecard, item->priv);
+		if (err)
+			goto rollback;
+	}
+	return 0;
+
+rollback:
+	list_for_each_entry_continue_reverse(item, &linecards->event_ops_list,
+					     list) {
+		if (!item->event_ops->got_unprovisioned)
+			continue;
+		item->event_ops->got_unprovisioned(mlxsw_core,
+						   linecard->slot_index,
+						   linecard, item->priv);
+	}
+	return err;
+}
+
+static void
+mlxsw_linecard_unprovision_cbs_call(struct mlxsw_core *mlxsw_core,
+				    struct mlxsw_linecards *linecards,
+				    struct mlxsw_linecard *linecard)
+{
+	struct mlxsw_linecards_event_ops_item *item;
+
+	list_for_each_entry(item, &linecards->event_ops_list, list) {
+		if (!item->event_ops->got_unprovisioned)
+			continue;
+		item->event_ops->got_unprovisioned(mlxsw_core,
+						   linecard->slot_index,
+						   linecard, item->priv);
+	}
+}
+
+static int
+mlxsw_linecard_provision_set(struct mlxsw_core *mlxsw_core,
+			     struct mlxsw_linecards *linecards,
+			     struct mlxsw_linecard *linecard,
+			     enum mlxsw_reg_mddq_card_type card_type)
+{
+	int err;
+
+	err = mlxsw_linecard_provision_cbs_call(mlxsw_core, linecards,
+						linecard);
+	if (err)
+		goto err_cbs_call;
+	linecard->provisioned = true;
+err_cbs_call:
+	return err;
+}
+
+static void mlxsw_linecard_provision_clear(struct mlxsw_core *mlxsw_core,
+					   struct mlxsw_linecards *linecards,
+					   struct mlxsw_linecard *linecard)
+{
+	linecard->provisioned = false;
+	mlxsw_linecard_unprovision_cbs_call(mlxsw_core, linecards,
+					    linecard);
+}
+
+static int mlxsw_linecard_ready_set(struct mlxsw_core *mlxsw_core, struct mlxsw_linecards *linecards,
+				    struct mlxsw_linecard *linecard)
+{
+	/*err = */mlxsw_linecard_provision_cbs_call(mlxsw_core, linecards,
+						linecard);
+
+	linecard->ready = true;
+	return 0;
+}
+
+static void mlxsw_linecard_ready_clear(struct mlxsw_linecard *linecard)
+{
+	linecard->ready = false;
+}
+
+static void mlxsw_linecard_active_set(struct mlxsw_core *mlxsw_core,
+				      struct mlxsw_linecards *linecards,
+				      struct mlxsw_linecard *linecard,
+				      u16 ini_version, u16 hw_revision)
+{
+	struct mlxsw_linecards_event_ops_item *item;
+
+	linecard->active = true;
+	linecard->hw_revision = hw_revision;
+	linecard->ini_version = ini_version;
+	list_for_each_entry(item, &linecards->event_ops_list, list) {
+		if (!item->event_ops->got_active)
+			continue;
+		item->event_ops->got_active(mlxsw_core, linecard->slot_index,
+					    linecard, item->priv);
+	}
+}
+
+static void mlxsw_linecard_active_clear(struct mlxsw_core *mlxsw_core,
+					struct mlxsw_linecards *linecards,
+					struct mlxsw_linecard *linecard)
+{
+	struct mlxsw_linecards_event_ops_item *item;
+
+	linecard->active = false;
+	list_for_each_entry(item, &linecards->event_ops_list, list) {
+		if (!item->event_ops->got_inactive)
+			continue;
+		item->event_ops->got_inactive(mlxsw_core, linecard->slot_index,
+					      linecard, item->priv);
+	}
+}
+
+static int __mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
+					   struct mlxsw_linecards *linecards,
+					   struct mlxsw_linecard *linecard,
+					   const char *mddq_pl,
+					   bool process_provision_only, bool tmp_delayed)
+{
+	enum mlxsw_reg_mddq_card_type card_type;
+	enum mlxsw_reg_mddq_ready ready;
+	bool provisioned;
+	u16 ini_version;
+	u16 hw_revision;
+	bool sr_valid;
+	u8 slot_index;
+	int err = 0;
+	bool active;
+	bool tmp_delayed_mddq = false;
+
+	mlxsw_reg_mddq_slot_info_unpack(mddq_pl, &slot_index, &provisioned,
+					&sr_valid, &ready, &active,
+					&hw_revision, &ini_version,
+					&card_type);
+
+	if (linecard) {
+		if (slot_index != linecard->slot_index)
+			return -EINVAL;
+	} else {
+		if (slot_index > linecards->count)
+			return -EINVAL;
+		linecard = mlxsw_linecard_get(linecards, slot_index);
+	}
+
+	mutex_lock(&linecard->lock);
+
+	if (provisioned && linecard->provisioned != provisioned) {
+		err = mlxsw_linecard_provision_set(mlxsw_core, linecards,
+						   linecard, card_type);
+		if (err)
+			goto out;
+		if (!process_provision_only)
+			tmp_delayed_mddq = true;
+	}
+
+	if (!process_provision_only && ready == MLXSW_REG_MDDQ_READY_READY &&
+	    !linecard->ready) {
+		err = mlxsw_linecard_ready_set(mlxsw_core, linecards, linecard);
+		if (err)
+			goto out;
+		tmp_delayed_mddq = true;
+	}
+
+	if (!process_provision_only && active && linecard->active != active)
+		mlxsw_linecard_active_set(mlxsw_core, linecards, linecard,
+					  hw_revision, ini_version);
+
+	if (!process_provision_only && !active && linecard->active != active)
+		mlxsw_linecard_active_clear(mlxsw_core, linecards, linecard);
+
+	if (!process_provision_only && ready != MLXSW_REG_MDDQ_READY_READY &&
+	    linecard->ready)
+		mlxsw_linecard_ready_clear(linecard);
+
+	if (!provisioned && linecard->provisioned != provisioned)
+		mlxsw_linecard_provision_clear(mlxsw_core, linecards, linecard);
+
+out:
+	mutex_unlock(&linecard->lock);
+
+	return err;
+}
+
+int mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
+				  const char *mddq_pl)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+
+	return __mlxsw_linecard_status_process(mlxsw_core, linecards, NULL,
+					       mddq_pl, false, false);
+}
+EXPORT_SYMBOL(mlxsw_linecard_status_process);
+
+static int mlxsw_linecard_status_get_and_process(struct mlxsw_core *mlxsw_core,
+						 struct mlxsw_linecards *linecards,
+						 struct mlxsw_linecard *linecard,
+						 bool process_provision_only,
+						 bool tmp_delayed)
+{
+	char mddq_pl[MLXSW_REG_MDDQ_LEN];
+	int err;
+
+	mlxsw_reg_mddq_slot_info_pack(mddq_pl, linecard->slot_index, false);
+	err = mlxsw_reg_query(mlxsw_core, MLXSW_REG(mddq), mddq_pl);
+	if (err)
+		return err;
+
+	return __mlxsw_linecard_status_process(mlxsw_core, linecards, linecard,
+					       mddq_pl, process_provision_only, tmp_delayed);
+}
+
+static int mlxsw_linecard_init(struct mlxsw_core *mlxsw_core,
+			       struct mlxsw_linecards *linecards,
+			       u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+	int err;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+	linecard->slot_index = slot_index;
+	linecard->linecards = linecards;
+	mutex_init(&linecard->lock);
+
+	err = mlxsw_linecard_status_get_and_process(mlxsw_core, linecards,
+						    linecard, true, false);
+	if (err)
+		goto err_status_get_and_process;
+
+	return 0;
+
+err_status_get_and_process:
+	return err;
+}
+
+static int mlxsw_linecard_event_delivery_set(struct mlxsw_core *mlxsw_core,
+					     struct mlxsw_linecard *linecard,
+					     bool enable)
+{
+	return 0;
+}
+
+static int mlxsw_linecard_post_init(struct mlxsw_core *mlxsw_core,
+				    struct mlxsw_linecards *linecards,
+				    u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+	int err;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+	linecard->slot_index = slot_index;
+
+	err = mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, true);
+	if (err)
+		return err;
+
+	err = mlxsw_linecard_status_get_and_process(mlxsw_core, linecards,
+						    linecard, false, false);
+	if (err)
+		goto err_status_get_and_process;
+
+	return 0;
+
+err_status_get_and_process:
+	mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, false);
+	return err;
+}
+
+static void mlxsw_linecard_pre_fini(struct mlxsw_core *mlxsw_core,
+				    struct mlxsw_linecards *linecards,
+				    u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+	mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, false);
+}
+
+static void mlxsw_linecard_fini(struct mlxsw_core *mlxsw_core,
+				struct mlxsw_linecards *linecards,
+				u8 slot_index)
+{
+	struct mlxsw_linecard *linecard;
+
+	linecard = mlxsw_linecard_get(linecards, slot_index);
+}
+
+int mlxsw_linecards_init(struct mlxsw_core *mlxsw_core,
+			 const struct mlxsw_bus_info *bus_info,
+			 struct mlxsw_linecards **p_linecards)
+{
+	char mgpir_pl[MLXSW_REG_MGPIR_LEN];
+	struct mlxsw_linecards *linecards;
+	u8 slot_count;
+	int err;
+	int i;
+
+	mlxsw_reg_mgpir_pack(mgpir_pl, 0);
+	err = mlxsw_reg_query(mlxsw_core, MLXSW_REG(mgpir), mgpir_pl);
+	if (err)
+		return err;
+
+	mlxsw_reg_mgpir_unpack(mgpir_pl, NULL, NULL, NULL,
+			       NULL, &slot_count);
+	if (!slot_count) {
+		*p_linecards = NULL;
+		return 0;
+	}
+
+	linecards = kzalloc(struct_size(linecards, linecards, slot_count),
+			    GFP_KERNEL);
+	if (!linecards)
+		return -ENOMEM;
+	linecards->count = slot_count;
+	linecards->mlxsw_core = mlxsw_core;
+	linecards->bus_info = bus_info;
+	INIT_LIST_HEAD(&linecards->event_ops_list);
+
+	for (i = 0; i < linecards->count; i++) {
+		err = mlxsw_linecard_init(mlxsw_core, linecards, i + 1);
+		if (err)
+			goto err_linecard_init;
+	}
+
+	*p_linecards = linecards;
+
+	return 0;
+
+err_linecard_init:
+	for (i--; i >= 0; i--)
+		mlxsw_linecard_fini(mlxsw_core, linecards, i + 1);
+	kfree(linecards);
+
+	return err;
+}
+
+int mlxsw_linecards_post_init(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards)
+{
+	int err;
+	int i;
+
+	if (!linecards)
+		return 0;
+
+	for (i = 0; i < linecards->count; i++) {
+		err = mlxsw_linecard_post_init(mlxsw_core, linecards, i + 1);
+		if (err)
+			goto err_linecard_post_init;
+	}
+	return 0;
+
+err_linecard_post_init:
+	for (i--; i >= 0; i--)
+		mlxsw_linecard_pre_fini(mlxsw_core, linecards, i + 1);
+
+	return err;
+}
+
+void mlxsw_linecards_pre_fini(struct mlxsw_core *mlxsw_core,
+			      struct mlxsw_linecards *linecards)
+{
+	int i;
+
+	if (!linecards)
+		return;
+	for (i = 0; i < linecards->count; i++)
+		mlxsw_linecard_pre_fini(mlxsw_core, linecards, i + 1);
+	/* Make sure all scheduled events are processed */
+	mlxsw_core_flush_owq();
+}
+
+void mlxsw_linecards_fini(struct mlxsw_core *mlxsw_core,
+			  struct mlxsw_linecards *linecards)
+{
+	int i;
+
+	if (!linecards)
+		return;
+	WARN_ON(!list_empty(&linecards->event_ops_list));
+	for (i = 0; i < linecards->count; i++)
+		mlxsw_linecard_fini(mlxsw_core, linecards, i + 1);
+	kfree(linecards);
+}
+
+int mlxsw_linecards_event_ops_register(struct mlxsw_core *mlxsw_core,
+				       struct mlxsw_linecards_event_ops *ops,
+				       void *priv)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+	struct mlxsw_linecards_event_ops_item *item;
+
+	item = kzalloc(sizeof(*item), GFP_KERNEL);
+	if (!item)
+		return -ENOMEM;
+	item->event_ops = ops;
+	item->priv = priv;
+	list_add_tail(&item->list, &linecards->event_ops_list);
+	return 0;
+}
+EXPORT_SYMBOL(mlxsw_linecards_event_ops_register);
+
+void mlxsw_linecards_event_ops_unregister(struct mlxsw_core *mlxsw_core,
+					  struct mlxsw_linecards_event_ops *ops,
+					  void *priv)
+{
+	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
+	struct mlxsw_linecards_event_ops_item *item, *tmp;
+
+	list_for_each_entry_safe(item, tmp, &linecards->event_ops_list, list) {
+		if (item->event_ops == ops && item->priv == priv)
+			list_del(&item->list);
+	}
+}
+EXPORT_SYMBOL(mlxsw_linecards_event_ops_unregister);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/minimal.c b/drivers/net/ethernet/mellanox/mlxsw/minimal.c
index 9379750bfea2..7c0751aa21b2 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/minimal.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/minimal.c
@@ -148,7 +148,7 @@ mlxsw_m_port_create(struct mlxsw_m *mlxsw_m, u8 local_port, u8 module)
 	struct net_device *dev;
 	int err;
 
-	err = mlxsw_core_port_init(mlxsw_m->core, local_port);
+	err = mlxsw_core_port_init(mlxsw_m->core, local_port, 0);
 	if (err) {
 		dev_err(mlxsw_m->bus_info->dev, "Port %d: Failed to init core port\n",
 			local_port);
-- 
2.20.1

