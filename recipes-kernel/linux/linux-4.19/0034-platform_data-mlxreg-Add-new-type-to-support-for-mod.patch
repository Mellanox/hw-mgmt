From 9329954080668bf804467d9a32b8b266f88e72cf Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@mellanox.com>
Date: Thu, 20 Aug 2020 18:34:48 +0300
Subject: [PATCH backport v4.19 11/12] platform_data/mlxreg: Add new type to
 support for modular systems

Add new types for the Mellanox modular systems MSN4800 which could
be equipped with the different types of replaceable line cards.

Add new type to specify the kind of hotplug events for the line cards
and power supplies.
The line card events are generated by CPLD and define different states
of the line cards during it initialization, like physical insertion,
hardware validation, power good, security validation, synchronization
between hardware and firmware.
Power supplies related event is only power good.

Add new type specifying the action, which should be performed when
particular hotplug event is received. This action defines in which
way hot pluggable device should be handled by the device driver.
The events could be symmetrical, like - 'line card power on/power off'
or 'line card insert/remove'. Some events are not symmetrical, like
'line card validated' or 'line card active'.
For example, the line card driver probing should be executed upon
receiving 'line card validated' event, driver removing - when
'line card removed' event is received. While the events like
'line card active' or 'line card powered off' should be handled
by the line card driver through the relevant notification message
for the relevant line card device. The device is matched by the
topology information block, which contains the physical slot, when
this is located and topology id, which contains device bus number
and device address.

Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
---
 include/linux/platform_data/mlxreg.h | 45 ++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 69d8b6866..729f14efe 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -26,12 +26,52 @@ enum mlxreg_wdt_type {
 };
 
 /**
+ * enum mlxreg_hotplug_kind - kind of hotplug entry
+ *
+ * @MLXREG_HOTPLUG_DEVICE_NA: do not care;
+ * @MLXREG_HOTPLUG_LC_PRESENT: entry for line card presence events;
+ * @MLXREG_HOTPLUG_LC_VERIFIED: entry for line card verification events;
+ * @MLXREG_HOTPLUG_LC_POWERED: entry for line card power events;
+ * @MLXREG_HOTPLUG_LC_SYNCED: entry for line card bus synchronization events;
+ * @MLXREG_HOTPLUG_LC_READY: entry for line card ready events;
+ */
+enum mlxreg_hotplug_kind {
+	MLXREG_HOTPLUG_DEVICE_NA = 0,
+	MLXREG_HOTPLUG_LC_PRESENT = 1,
+	MLXREG_HOTPLUG_LC_VERIFIED = 2,
+	MLXREG_HOTPLUG_LC_POWERED = 3,
+	MLXREG_HOTPLUG_LC_SYNCED = 4,
+	MLXREG_HOTPLUG_LC_READY = 5,
+};
+
+/**
+ * enum mlxreg_hotplug_device_action - hotplug device action required for
+ *				       driver's connectivity
+ *
+ * @MLXREG_HOTPLUG_DEVICE_DEFAULT_ACTION: probe device for 'on' event, remove
+ *					  for 'off' event;
+ * @MLXREG_HOTPLUG_DEVICE_PLATFORM_PROBE_ACTION: probe platform device for 'on'
+ *						 event, notify for 'off' event;
+ * @MLXREG_HOTPLUG_DEVICE_PLATFORM_REMOVE_ACTION: remove platform device for
+ *						  'off' event, notify for 'on'
+ *						   event;
+ * @MLXREG_HOTPLUG_DEVICE_NO_ACTION: no connectivity action is required;
+ */
+enum mlxreg_hotplug_device_action {
+	MLXREG_HOTPLUG_DEVICE_DEFAULT_ACTION = 0,
+	MLXREG_HOTPLUG_DEVICE_PLATFORM_PROBE_ACTION = 1,
+	MLXREG_HOTPLUG_DEVICE_PLATFORM_REMOVE_ACTION = 2,
+	MLXREG_HOTPLUG_DEVICE_NO_ACTION = 3,
+};
+
+/**
  * struct mlxreg_hotplug_device - I2C device data:
  *
  * @adapter: I2C device adapter;
  * @client: I2C device client;
  * @brdinfo: device board information;
  * @nr: I2C device adapter number, to which device is to be attached;
+ * @action: action to be performed upon event receiving;
  *
  * Structure represents I2C hotplug device static data (board topology) and
  * dynamic data (related kernel objects handles).
@@ -41,6 +81,7 @@ struct mlxreg_hotplug_device {
 	struct i2c_client *client;
 	struct i2c_board_info *brdinfo;
 	int nr;
+	enum mlxreg_hotplug_device_action action;
 };
 
 /**
@@ -58,6 +99,7 @@ struct mlxreg_hotplug_device {
  * @health_cntr: dynamic device health indication counter;
  * @attached: true if device has been attached after good health indication;
  * @regnum: number of registers occupied by multi-register attribute;
+ * @slot: slot number, at which device is located;
  */
 struct mlxreg_core_data {
 	char label[MLXREG_CORE_LABEL_MAX_SIZE];
@@ -72,12 +114,14 @@ struct mlxreg_core_data {
 	u32 health_cntr;
 	bool attached;
 	u8 regnum;
+	u8 slot;
 };
 
 /**
  * struct mlxreg_core_item - same type components controlled by the driver:
  *
  * @data: component data;
+ * @kind: kind of hotplug attribute;
  * @aggr_mask: group aggregation mask;
  * @reg: group interrupt status register;
  * @mask: group interrupt mask;
@@ -90,6 +134,7 @@ struct mlxreg_core_data {
  */
 struct mlxreg_core_item {
 	struct mlxreg_core_data *data;
+	enum mlxreg_hotplug_kind kind;
 	u32 aggr_mask;
 	u32 reg;
 	u32 mask;
-- 
2.11.0

