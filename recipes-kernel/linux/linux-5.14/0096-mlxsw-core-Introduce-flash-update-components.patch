From 2cde6035d052e661870781ebb2b000e21891ed65 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Fri, 18 Oct 2024 09:53:40 +0300
Subject: [PATCH backport 5.10 096/197] mlxsw: core: Introduce flash update
 components

Introduce an infrastructure allowing to have multiple components for
flashing purposes that can be registered from inside the driver. Convert
the existing "no component" flash update to use the new infra.

Signed-off-by: Jiri Pirko <jiri@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/core.c | 116 ++++++++++++++++++++-
 drivers/net/ethernet/mellanox/mlxsw/core.h |  12 +++
 2 files changed, 126 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.c b/drivers/net/ethernet/mellanox/mlxsw/core.c
index f2d07f393598..9a32efc2c148 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@ -92,6 +92,10 @@ struct mlxsw_core {
 		struct devlink_health_reporter *fw_fatal;
 	} health;
 	struct mlxsw_env *env;
+	struct list_head flash_component_list;
+	struct mutex flash_update_lock; /* Protects component list and component
+					 * callbacks.
+					 */
 	unsigned long driver_priv[];
 	/* driver_priv has to be always the last item */
 };
@@ -1162,13 +1166,102 @@ static int mlxsw_core_fw_rev_validate(struct mlxsw_core *mlxsw_core,
 		return 0;
 }
 
+static int mlxsw_core_fw_flash_cb(struct mlxsw_core *mlxsw_core,
+				  const struct firmware *firmware,
+				  struct netlink_ext_ack *extack, void *priv)
+{
+	return mlxsw_core_fw_flash(mlxsw_core, firmware, extack);
+}
+
+struct mlxsw_core_flash_component {
+	struct list_head list;
+	const char *name;
+	mlxsw_core_flash_update_cb cb;
+	void *priv;
+};
+
+static struct mlxsw_core_flash_component *
+mlxsw_core_flash_component_lookup(struct mlxsw_core *mlxsw_core,
+				  const char *name)
+{
+	struct mlxsw_core_flash_component *component;
+
+	list_for_each_entry(component, &mlxsw_core->flash_component_list,
+			    list) {
+		if ((name && component->name &&
+		     !strcmp(name, component->name)) ||
+		    (!name && !component->name))
+			return component;
+	}
+	return NULL;
+}
+
 static int mlxsw_core_fw_flash_update(struct mlxsw_core *mlxsw_core,
 				      struct devlink_flash_update_params *params,
 				      struct netlink_ext_ack *extack)
 {
-	return mlxsw_core_fw_flash(mlxsw_core, params->fw, extack);
+	struct mlxsw_core_flash_component *component;
+	int err;
+
+	mutex_lock(&mlxsw_core->flash_update_lock);
+	component = mlxsw_core_flash_component_lookup(mlxsw_core,
+						      params->component);
+	if (!component) {
+		NL_SET_ERR_MSG_MOD(extack, "Component does not exist");
+		err = -ENOENT;
+		goto unlock;
+	}
+	err = component->cb(mlxsw_core, params->fw, extack, component->priv);
+unlock:
+	mutex_unlock(&mlxsw_core->flash_update_lock);
+	return err;
 }
 
+int mlxsw_core_flash_component_register(struct mlxsw_core *mlxsw_core,
+					const char *name,
+					mlxsw_core_flash_update_cb cb,
+					void *priv)
+{
+	struct mlxsw_core_flash_component *component;
+	int err = 0;
+
+	mutex_lock(&mlxsw_core->flash_update_lock);
+	component = mlxsw_core_flash_component_lookup(mlxsw_core, name);
+	if (WARN_ON(component)) {
+		err = -EEXIST;
+		goto unlock;
+	}
+	component = kzalloc(sizeof(*component), GFP_KERNEL);
+	if (!component) {
+		err = -ENOMEM;
+		goto unlock;
+	}
+	component->name = name;
+	component->cb = cb;
+	component->priv = priv;
+	list_add_tail(&component->list, &mlxsw_core->flash_component_list);
+unlock:
+	mutex_unlock(&mlxsw_core->flash_update_lock);
+	return err;
+}
+EXPORT_SYMBOL(mlxsw_core_flash_component_register);
+
+void mlxsw_core_flash_component_unregister(struct mlxsw_core *mlxsw_core,
+					   const char *name)
+{
+	struct mlxsw_core_flash_component *component;
+
+	mutex_lock(&mlxsw_core->flash_update_lock);
+	component = mlxsw_core_flash_component_lookup(mlxsw_core, name);
+	if (WARN_ON(!component))
+		goto unlock;
+	list_del(&component->list);
+unlock:
+	mutex_unlock(&mlxsw_core->flash_update_lock);
+	kfree(component);
+}
+EXPORT_SYMBOL(mlxsw_core_flash_component_unregister);
+
 static int mlxsw_core_devlink_param_fw_load_policy_validate(struct devlink *devlink, u32 id,
 							    union devlink_param_value val,
 							    struct netlink_ext_ack *extack)
@@ -1616,6 +1709,7 @@ mlxsw_devlink_trap_policer_counter_get(struct devlink *devlink,
 }
 
 static const struct devlink_ops mlxsw_devlink_ops = {
+	.supported_flash_update_params	= DEVLINK_SUPPORT_FLASH_UPDATE_COMPONENT,
 	.reload_actions		= BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT) |
 				  BIT(DEVLINK_RELOAD_ACTION_FW_ACTIVATE),
 	.reload_down		= mlxsw_devlink_core_bus_device_reload_down,
@@ -1942,6 +2036,16 @@ __mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 	mlxsw_core->bus_priv = bus_priv;
 	mlxsw_core->bus_info = mlxsw_bus_info;
 
+	if (!reload) {
+		INIT_LIST_HEAD(&mlxsw_core->flash_component_list);
+		mutex_init(&mlxsw_core->flash_update_lock);
+		err = mlxsw_core_flash_component_register(mlxsw_core, NULL,
+							  mlxsw_core_fw_flash_cb,
+							  NULL);
+		if (err)
+			goto err_flash_component_register;
+	}
+
 	res = mlxsw_driver->res_query_enabled ? &mlxsw_core->res : NULL;
 	err = mlxsw_bus->init(bus_priv, mlxsw_core, mlxsw_driver->profile, res);
 	if (err)
@@ -2061,6 +2165,11 @@ __mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 err_register_resources:
 	mlxsw_bus->fini(bus_priv);
 err_bus_init:
+	if (!reload) {
+		mlxsw_core_flash_component_unregister(mlxsw_core, NULL);
+		mutex_destroy(&mlxsw_core->flash_update_lock);
+	}
+err_flash_component_register:
 	if (!reload)
 		devlink_free(devlink);
 err_devlink_alloc:
@@ -2129,8 +2238,11 @@ void mlxsw_core_bus_device_unregister(struct mlxsw_core *mlxsw_core,
 	if (!reload)
 		devlink_resources_unregister(devlink, NULL);
 	mlxsw_core->bus->fini(mlxsw_core->bus_priv);
-	if (!reload)
+	if (!reload) {
+		mlxsw_core_flash_component_unregister(mlxsw_core, NULL);
+		mutex_destroy(&mlxsw_core->flash_update_lock);
 		devlink_free(devlink);
+	}
 
 	return;
 
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.h b/drivers/net/ethernet/mellanox/mlxsw/core.h
index c0135bb176ad..f6308176366a 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.h
@@ -46,6 +46,18 @@ mlxsw_core_fw_rev_minor_subminor_validate(const struct mlxsw_fw_rev *rev,
 int mlxsw_core_driver_register(struct mlxsw_driver *mlxsw_driver);
 void mlxsw_core_driver_unregister(struct mlxsw_driver *mlxsw_driver);
 
+typedef int (*mlxsw_core_flash_update_cb)(struct mlxsw_core *mlxsw_core,
+					  const struct firmware *firmware,
+					  struct netlink_ext_ack *extack,
+					  void *priv);
+
+int mlxsw_core_flash_component_register(struct mlxsw_core *mlxsw_core,
+					const char *name,
+					mlxsw_core_flash_update_cb cb,
+					void *priv);
+void mlxsw_core_flash_component_unregister(struct mlxsw_core *mlxsw_core,
+					   const char *name);
+
 int mlxsw_core_bus_device_register(const struct mlxsw_bus_info *mlxsw_bus_info,
 				   const struct mlxsw_bus *mlxsw_bus,
 				   void *bus_priv, bool reload,
-- 
2.20.1

