From aec592f5c0d44b3ac4038dc539859fa247738f6e Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@mellanox.com>
Date: Mon, 6 Nov 2017 19:42:04 +0000
Subject: [v4.9 backport 35/35] mlxsw: thermal qsfp: add support for cpld
 reading and change thermal policy

The patch:
- changes the number of thermal trip points;
- adds register for cpld version reading and expose the version through
  sysfs interface.

Signed-off-by: Vadim Pasterank <vadimp@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlxsw/core_thermal.c | 10 +---
 drivers/net/ethernet/mellanox/mlxsw/qsfp_sysfs.c   | 58 +++++++++++++++++++++-
 drivers/net/ethernet/mellanox/mlxsw/reg.h          | 39 ++++++++++++++-
 3 files changed, 97 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_thermal.c b/drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
index d866c98..8047556 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
@@ -53,16 +53,10 @@ struct mlxsw_thermal_trip {
 };
 
 static const struct mlxsw_thermal_trip default_thermal_trips[] = {
-	{	/* In range - 0-40% PWM */
+	{	/* Above normal - 60%-100% PWM */
 		.type		= THERMAL_TRIP_ACTIVE,
 		.temp		= 75000,
-		.min_state	= 0,
-		.max_state	= (4 * MLXSW_THERMAL_MAX_STATE) / 10,
-	},
-	{	/* High - 40-100% PWM */
-		.type		= THERMAL_TRIP_ACTIVE,
-		.temp		= 80000,
-		.min_state	= (4 * MLXSW_THERMAL_MAX_STATE) / 10,
+		.min_state	= (6 * MLXSW_THERMAL_MAX_STATE) / 10,
 		.max_state	= MLXSW_THERMAL_MAX_STATE,
 	},
 	{
diff --git a/drivers/net/ethernet/mellanox/mlxsw/qsfp_sysfs.c b/drivers/net/ethernet/mellanox/mlxsw/qsfp_sysfs.c
index 2ec27ac..3bc6cf8 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/qsfp_sysfs.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/qsfp_sysfs.c
@@ -49,6 +49,7 @@
 #define MLXSW_QSFP_MAX_NUM		64
 #define MLXSW_QSFP_MIN_REQ_LEN		4
 #define MLXSW_QSFP_STATUS_VALID_TIME	(120 * HZ)
+#define MLXSW_QSFP_MAX_CPLD_NUM		1
 
 static const u8 mlxsw_qsfp_page_number[] = { 0xa0, 0x00, 0x01, 0x02, 0x03 };
 static const u16 mlxsw_qsfp_page_shift[] = { 0x00, 0x80, 0x80, 0x80, 0x80 };
@@ -80,6 +81,8 @@ struct mlxsw_qsfp {
 	struct mlxsw_qsfp_module modules[MLXSW_QSFP_MAX_NUM];
 	u8 module_ind[MLXSW_QSFP_MAX_NUM];
 	u8 module_count;
+	struct attribute *cpld_attrs[MLXSW_QSFP_MAX_CPLD_NUM + 1];
+	struct device_attribute *cpld_dev_attrs;
 };
 
 static int
@@ -198,11 +201,37 @@ mlxsw_qsfp_status_show(struct device *dev, struct device_attribute *attr,
 	return sprintf(buf, "%u\n", !status);
 }
 
+static ssize_t
+mlxsw_qsfp_cpld_show(struct device *dev, struct device_attribute *attr,
+		     char *buf)
+{
+	struct mlxsw_qsfp *mlxsw_qsfp = dev_get_platdata(dev);
+	char msci_pl[MLXSW_REG_MSCI_LEN];
+	u32 version, i;
+	int err;
+
+	for (i = 0; i < MLXSW_QSFP_MAX_CPLD_NUM; i++) {
+		if ((mlxsw_qsfp->cpld_dev_attrs + i) == attr)
+			break;
+	}
+	if (i == MLXSW_QSFP_MAX_CPLD_NUM)
+		return -EINVAL;
+
+	mlxsw_reg_msci_pack(msci_pl, i);
+	err = mlxsw_reg_query(mlxsw_qsfp->core, MLXSW_REG(msci), msci_pl);
+	if (err)
+		return err;
+
+	version = mlxsw_reg_msci_version_get(msci_pl);
+
+	return sprintf(buf, "%u\n", version);
+}
+
 int mlxsw_qsfp_init(struct mlxsw_core *mlxsw_core,
 		    const struct mlxsw_bus_info *mlxsw_bus_info,
 		    struct mlxsw_qsfp **p_qsfp)
 {
-	struct device_attribute *dev_attr;
+	struct device_attribute *dev_attr, *cpld_dev_attr;
 	char pmlp_pl[MLXSW_REG_PMLP_LEN];
 	struct mlxsw_qsfp *mlxsw_qsfp;
 	struct bin_attribute *eeprom;
@@ -255,6 +284,13 @@ int mlxsw_qsfp_init(struct mlxsw_core *mlxsw_core,
 	if (!mlxsw_qsfp->dev_attrs)
 		return -ENOMEM;
 
+	mlxsw_qsfp->cpld_dev_attrs = devm_kzalloc(mlxsw_bus_info->dev,
+					MLXSW_QSFP_MAX_CPLD_NUM *
+					sizeof(*mlxsw_qsfp->cpld_dev_attrs),
+					GFP_KERNEL);
+	if (!mlxsw_qsfp->cpld_dev_attrs)
+		return -ENOMEM;
+
 	eeprom = mlxsw_qsfp->eeprom;
 	dev_attr = mlxsw_qsfp->dev_attrs;
 	for (i = 0; i < mlxsw_qsfp->module_count; i++, eeprom++, dev_attr++) {
@@ -285,10 +321,30 @@ int mlxsw_qsfp_init(struct mlxsw_core *mlxsw_core,
 		if (err)
 			goto err_create_bin_file;
 	}
+
+	cpld_dev_attr = mlxsw_qsfp->cpld_dev_attrs;
+	for (i = 0; i < MLXSW_QSFP_MAX_CPLD_NUM; i++, cpld_dev_attr++) {
+		cpld_dev_attr->show = mlxsw_qsfp_cpld_show;
+		cpld_dev_attr->attr.mode = 0444;
+		cpld_dev_attr->attr.name = devm_kasprintf(mlxsw_bus_info->dev,
+						     GFP_KERNEL,
+						     "cpld%d_version", i + 1);
+		mlxsw_qsfp->cpld_attrs[i] = &cpld_dev_attr->attr;
+		sysfs_attr_init(&cpld_dev_attr->attr);
+		err = sysfs_create_file(&mlxsw_bus_info->dev->kobj,
+					mlxsw_qsfp->cpld_attrs[i]);
+		if (err)
+			goto err_create_cpld_file;
+	}
+
 	*p_qsfp = mlxsw_qsfp;
 
 	return 0;
 
+err_create_cpld_file:
+	sysfs_remove_file(&mlxsw_bus_info->dev->kobj,
+			  mlxsw_qsfp->cpld_attrs[i--]);
+	i = mlxsw_qsfp->module_count;
 err_create_bin_file:
 	sysfs_remove_file(&mlxsw_bus_info->dev->kobj,
 			  mlxsw_qsfp->attrs[i--]);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/reg.h b/drivers/net/ethernet/mellanox/mlxsw/reg.h
index 20dd6be..b606171 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/reg.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/reg.h
@@ -4472,7 +4472,7 @@ enum mlxsw_reg_mfcr_pwm_frequency {
  */
 MLXSW_ITEM32(reg, mfcr, pwm_frequency, 0x00, 0, 6);
 
-#define MLXSW_MFCR_TACHOS_MAX 10
+#define MLXSW_MFCR_TACHOS_MAX 12
 
 /* reg_mfcr_tacho_active
  * Indicates which of the tachometer is active (bit per tachometer).
@@ -4942,6 +4942,43 @@ static inline void mlxsw_reg_mpar_pack(char *payload, u8 local_port,
 	mlxsw_reg_mpar_pa_id_set(payload, pa_id);
 }
 
+/* MSCI - Management System CPLD Information Register
+ * ---------------------------------------------------
+ * This register allows querying for the System CPLD(s) information.
+ */
+#define MLXSW_REG_MSCI_ID 0x902A
+#define MLXSW_REG_MSCI_LEN 0x10
+
+static const struct mlxsw_reg_info mlxsw_reg_msci = {
+	.id = MLXSW_REG_MSCI_ID,
+	.len = MLXSW_REG_MSCI_LEN,
+};
+
+/* reg_msci_index
+ * Index to access.
+ * Access: Index
+ */
+MLXSW_ITEM32(reg, msci, index, 0x00, 0, 4);
+
+/* reg_msci_pwm_version
+ * Controls the frequency of the PWM signal.
+ * Access: R0
+ */
+MLXSW_ITEM32(reg, msci, version, 0x04, 0, 32);
+
+static inline void
+mlxsw_reg_msci_pack(char *payload, u8 index)
+{
+	MLXSW_REG_ZERO(msci, payload);
+	mlxsw_reg_msci_index_set(payload, index);
+}
+
+static inline void
+mlxsw_reg_msci_unpack(char *payload, u16 *p_version)
+{
+	*p_version = mlxsw_reg_msci_version_get(payload);
+}
+
 /* MLCR - Management LED Control Register
  * --------------------------------------
  * Controls the system LEDs.
-- 
2.1.4

