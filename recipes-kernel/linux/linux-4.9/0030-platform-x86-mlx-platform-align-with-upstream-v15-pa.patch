From d53bc5dc941653f0ed93b11a647bd6ff40f40ef2 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@mellanox.com>
Date: Sun, 22 Oct 2017 18:32:02 +0000
Subject: [v4.9 backport 30/30] platform/x86: mlx-platform: align with upstream
 v15 patch

It aligns mlx-platform and mlxreg-hotplug drivers with upstream
modifications.

Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
---
 drivers/platform/mellanox/Kconfig          |   2 +-
 drivers/platform/mellanox/mlxreg-hotplug.c |  78 +++---
 drivers/platform/x86/mlx-platform.c        | 433 ++++++++++++++++++++++-------
 include/linux/platform_data/mlxreg.h       |   4 +
 4 files changed, 377 insertions(+), 140 deletions(-)

diff --git a/drivers/platform/mellanox/Kconfig b/drivers/platform/mellanox/Kconfig
index 01ec857..b197cc1 100644
--- a/drivers/platform/mellanox/Kconfig
+++ b/drivers/platform/mellanox/Kconfig
@@ -4,7 +4,7 @@
 
 menuconfig MELLANOX_PLATFORM
 	bool "Platform support for Mellanox hardware"
-	depends on (X86 && !OF_DYNAMIC) || ARM || COMPILE_TEST
+	depends on X86 || ARM || COMPILE_TEST
 	---help---
 	  Say Y here to get to see options for platform support for
 	  Mellanox systems. This option alone does not add any kernel code.
diff --git a/drivers/platform/mellanox/mlxreg-hotplug.c b/drivers/platform/mellanox/mlxreg-hotplug.c
index 95f21f7..94fdb6b 100644
--- a/drivers/platform/mellanox/mlxreg-hotplug.c
+++ b/drivers/platform/mellanox/mlxreg-hotplug.c
@@ -33,19 +33,15 @@
 
 #include <linux/bitops.h>
 #include <linux/device.h>
-#include <linux/gpio.h>
 #include <linux/hwmon.h>
 #include <linux/hwmon-sysfs.h>
-#include <linux/interrupt.h>
 #include <linux/i2c.h>
-#include <linux/io.h>
-#include <linux/leds.h>
+#include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/of_device.h>
 #include <linux/platform_data/mlxreg.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
-#include <linux/wait.h>
 #include <linux/workqueue.h>
 
 /* Offset of event and mask registers from status register. */
@@ -100,7 +96,7 @@ struct mlxreg_hotplug_priv_data {
 	bool after_probe;
 };
 
-#if defined(CONFIG_OF_DYNAMIC) && !defined(CONFIG_COMPILE_TEST)
+#if defined(CONFIG_OF_DYNAMIC)
 /**
  * struct mlxreg_hotplug_device_en - Open Firmware property for enabling device
  *
@@ -241,8 +237,10 @@ static ssize_t mlxreg_hotplug_attr_show(struct device *dev,
 	return sprintf(buf, "%u\n", regval);
 }
 
-static int
-mlxreg_hotplug_attr_init(struct mlxreg_hotplug_priv_data *priv)
+#define PRIV_ATTR(i) priv->mlxreg_hotplug_attr[i]
+#define PRIV_DEV_ATTR(i) priv->mlxreg_hotplug_dev_attr[i]
+
+static int mlxreg_hotplug_attr_init(struct mlxreg_hotplug_priv_data *priv)
 {
 	struct mlxreg_core_hotplug_platform_data *pdata;
 	struct mlxreg_core_item *item;
@@ -252,41 +250,40 @@ mlxreg_hotplug_attr_init(struct mlxreg_hotplug_priv_data *priv)
 	pdata = dev_get_platdata(&priv->pdev->dev);
 	item = pdata->items;
 
-	for (i = 0; i < pdata->counter; i++)
-		num_attrs += (item + i)->count;
-
-	priv->group.attrs = devm_kzalloc(&priv->pdev->dev, num_attrs *
-					 sizeof(struct attribute *),
-					 GFP_KERNEL);
-	if (!priv->group.attrs)
-		return -ENOMEM;
-
+	/* Go over all kinds of items - psu, pwr, fan. */
 	for (i = 0; i < pdata->counter; i++, item++) {
+		num_attrs += item->count;
 		data = item->data;
+		/* Go over all units within the item. */
 		for (j = 0; j < item->count; j++, data++, id++) {
-			priv->mlxreg_hotplug_attr[id] =
-			&priv->mlxreg_hotplug_dev_attr[id].dev_attr.attr;
-			priv->mlxreg_hotplug_attr[id]->name =
-				devm_kasprintf(&priv->pdev->dev, GFP_KERNEL,
-					       data->label);
+			PRIV_ATTR(id) = &PRIV_DEV_ATTR(id).dev_attr.attr;
+			PRIV_ATTR(id)->name = devm_kasprintf(&priv->pdev->dev,
+							     GFP_KERNEL,
+							     data->label);
 
-			if (!priv->mlxreg_hotplug_attr[id]->name) {
+			if (!PRIV_ATTR(id)->name) {
 				dev_err(priv->dev, "Memory allocation failed for attr %d.\n",
 					id);
 				return -ENOMEM;
 			}
 
-			priv->mlxreg_hotplug_dev_attr[id].dev_attr.attr.mode =
-									0444;
-			priv->mlxreg_hotplug_dev_attr[id].dev_attr.show =
+			PRIV_DEV_ATTR(id).dev_attr.attr.name =
+							PRIV_ATTR(id)->name;
+			PRIV_DEV_ATTR(id).dev_attr.attr.mode = 0444;
+			PRIV_DEV_ATTR(id).dev_attr.show =
 						mlxreg_hotplug_attr_show;
-			priv->mlxreg_hotplug_dev_attr[id].nr = i;
-			priv->mlxreg_hotplug_dev_attr[id].index = j;
-			sysfs_attr_init(
-			&priv->mlxreg_hotplug_dev_attr[id].dev_attr.attr);
+			PRIV_DEV_ATTR(id).nr = i;
+			PRIV_DEV_ATTR(id).index = j;
+			sysfs_attr_init(&PRIV_DEV_ATTR(id).dev_attr.attr);
 		}
 	}
 
+	priv->group.attrs = devm_kzalloc(&priv->pdev->dev, num_attrs *
+					 sizeof(struct attribute *),
+					 GFP_KERNEL);
+	if (!priv->group.attrs)
+		return -ENOMEM;
+
 	priv->group.attrs = priv->mlxreg_hotplug_attr;
 	priv->groups[0] = &priv->group;
 	priv->groups[1] = NULL;
@@ -552,6 +549,12 @@ static int mlxreg_hotplug_set_irq(struct mlxreg_hotplug_priv_data *priv)
 	if (ret)
 		goto access_error;
 
+	/* Keep low aggregation initial status as zero and unmask events. */
+	ret = regmap_write(priv->regmap, pdata->cell_low +
+			   MLXREG_HOTPLUG_AGGR_MASK_OFF, pdata->mask_low);
+	if (ret)
+		goto access_error;
+
 	/* Invoke work handler for initializing hot plug devices setting. */
 	mlxreg_hotplug_work_handler(&priv->dwork_irq.work);
 
@@ -579,6 +582,10 @@ static void mlxreg_hotplug_unset_irq(struct mlxreg_hotplug_priv_data *priv)
 	disable_irq(priv->irq);
 	cancel_delayed_work_sync(&priv->dwork_irq);
 
+	/* Mask low aggregation event. */
+	regmap_write(priv->regmap, pdata->cell_low +
+		     MLXREG_HOTPLUG_AGGR_MASK_OFF, 0);
+
 	/* Mask aggregation event. */
 	regmap_write(priv->regmap, pdata->cell + MLXREG_HOTPLUG_AGGR_MASK_OFF,
 		     0);
@@ -687,18 +694,9 @@ static int mlxreg_hotplug_remove(struct platform_device *pdev)
 	return 0;
 }
 
-#if defined(CONFIG_OF)
-static const struct of_device_id mlxreg_hotplug_dt_match[] = {
-	{ .compatible = "mellanox,mlxreg-hotplug" },
-	{ },
-};
-MODULE_DEVICE_TABLE(of, mlxreg_hotplug_dt_match);
-#endif
-
 static struct platform_driver mlxreg_hotplug_driver = {
 	.driver = {
-	    .name = "mlxreg-hotplug",
-	    .of_match_table = of_match_ptr(mlxreg_hotplug_dt_match),
+		.name = "mlxreg-hotplug",
 	},
 	.probe = mlxreg_hotplug_probe,
 	.remove = mlxreg_hotplug_remove,
diff --git a/drivers/platform/x86/mlx-platform.c b/drivers/platform/x86/mlx-platform.c
index aba084c..df10f75 100644
--- a/drivers/platform/x86/mlx-platform.c
+++ b/drivers/platform/x86/mlx-platform.c
@@ -47,15 +47,16 @@
 /* LPC bus IO offsets */
 #define MLXPLAT_CPLD_LPC_I2C_BASE_ADRR		0x2000
 #define MLXPLAT_CPLD_LPC_REG_BASE_ADRR		0x2500
-#define MLXPLAT_CPLD_LPC_REG_LED1_ADRR		0x20
-#define MLXPLAT_CPLD_LPC_REG_LED2_ADRR		0x21
-#define MLXPLAT_CPLD_LPC_REG_LED3_ADRR		0x22
-#define MLXPLAT_CPLD_LPC_REG_LED4_ADRR		0x23
-#define MLXPLAT_CPLD_LPC_REG_LED5_ADRR		0x24
-#define MLXPLAT_CPLD_LPC_REG_AGGR_ADRR		0x3a
-#define MLXPLAT_CPLD_LPC_REG_PSU_ADRR		0x58
-#define MLXPLAT_CPLD_LPC_REG_PWR_ADRR		0x64
-#define MLXPLAT_CPLD_LPC_REG_FAN_ADRR		0x88
+#define MLXPLAT_CPLD_LPC_REG_LED1_OFF		0x20
+#define MLXPLAT_CPLD_LPC_REG_LED2_OFF		0x21
+#define MLXPLAT_CPLD_LPC_REG_LED3_OFF		0x22
+#define MLXPLAT_CPLD_LPC_REG_LED4_OFF		0x23
+#define MLXPLAT_CPLD_LPC_REG_LED5_OFF		0x24
+#define MLXPLAT_CPLD_LPC_REG_AGGR_OFF		0x3a
+#define MLXPLAT_CPLD_LPC_REG_AGGR_LOW_OFF	0x40
+#define MLXPLAT_CPLD_LPC_REG_PSU_OFF		0x58
+#define MLXPLAT_CPLD_LPC_REG_PWR_OFF		0x64
+#define MLXPLAT_CPLD_LPC_REG_FAN_OFF		0x88
 #define MLXPLAT_CPLD_LPC_IO_RANGE		0x100
 #define MLXPLAT_CPLD_LPC_I2C_CH1_OFF		0xdb
 #define MLXPLAT_CPLD_LPC_I2C_CH2_OFF		0xda
@@ -73,6 +74,8 @@
 #define MLXPLAT_CPLD_AGGR_FAN_MASK_DEF	0x40
 #define MLXPLAT_CPLD_AGGR_MASK_DEF	(MLXPLAT_CPLD_AGGR_PSU_MASK_DEF | \
 					 MLXPLAT_CPLD_AGGR_FAN_MASK_DEF)
+#define MLXPLAT_CPLD_AGGR_MASK_NG_DEF	0x04
+#define MLXPLAT_CPLD_LOW_AGGR_MASK_LOW	0xc0
 #define MLXPLAT_CPLD_AGGR_MASK_MSN21XX	0x04
 #define MLXPLAT_CPLD_PSU_MASK		GENMASK(1, 0)
 #define MLXPLAT_CPLD_PWR_MASK		GENMASK(1, 0)
@@ -192,14 +195,14 @@ static struct i2c_board_info mlxplat_mlxcpld_fan[] = {
 static struct mlxreg_core_data mlxplat_mlxcpld_default_psu_items_data[] = {
 	{
 		.label = "psu1",
-		.reg = MLXPLAT_CPLD_LPC_REG_PSU_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
 		.mask = BIT(0),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_psu[0],
 		.hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR,
 	},
 	{
 		.label = "psu2",
-		.reg = MLXPLAT_CPLD_LPC_REG_PSU_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
 		.mask = BIT(1),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_psu[1],
 		.hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR,
@@ -209,14 +212,14 @@ static struct mlxreg_core_data mlxplat_mlxcpld_default_psu_items_data[] = {
 static struct mlxreg_core_data mlxplat_mlxcpld_default_pwr_items_data[] = {
 	{
 		.label = "pwr1",
-		.reg = MLXPLAT_CPLD_LPC_REG_PWR_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
 		.mask = BIT(0),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_pwr[0],
 		.hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR,
 	},
 	{
 		.label = "pwr2",
-		.reg = MLXPLAT_CPLD_LPC_REG_PWR_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
 		.mask = BIT(1),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_pwr[1],
 		.hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR,
@@ -226,28 +229,28 @@ static struct mlxreg_core_data mlxplat_mlxcpld_default_pwr_items_data[] = {
 static struct mlxreg_core_data mlxplat_mlxcpld_default_fan_items_data[] = {
 	{
 		.label = "fan1",
-		.reg = MLXPLAT_CPLD_LPC_REG_FAN_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
 		.mask = BIT(0),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_fan[0],
 		.hpdev.nr = 11,
 	},
 	{
 		.label = "fan2",
-		.reg = MLXPLAT_CPLD_LPC_REG_FAN_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
 		.mask = BIT(1),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_fan[1],
 		.hpdev.nr = 12,
 	},
 	{
 		.label = "fan3",
-		.reg = MLXPLAT_CPLD_LPC_REG_FAN_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
 		.mask = BIT(2),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_fan[2],
 		.hpdev.nr = 13,
 	},
 	{
 		.label = "fan4",
-		.reg = MLXPLAT_CPLD_LPC_REG_FAN_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
 		.mask = BIT(3),
 		.hpdev.brdinfo = &mlxplat_mlxcpld_fan[3],
 		.hpdev.nr = 14,
@@ -258,7 +261,7 @@ static struct mlxreg_core_item mlxplat_mlxcpld_default_items[] = {
 	{
 		.data = mlxplat_mlxcpld_default_psu_items_data,
 		.aggr_mask = MLXPLAT_CPLD_AGGR_PSU_MASK_DEF,
-		.reg = MLXPLAT_CPLD_LPC_REG_PSU_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
 		.mask = MLXPLAT_CPLD_PSU_MASK,
 		.count = ARRAY_SIZE(mlxplat_mlxcpld_psu),
 		.inversed = 1,
@@ -267,7 +270,7 @@ static struct mlxreg_core_item mlxplat_mlxcpld_default_items[] = {
 	{
 		.data = mlxplat_mlxcpld_default_pwr_items_data,
 		.aggr_mask = MLXPLAT_CPLD_AGGR_PWR_MASK_DEF,
-		.reg = MLXPLAT_CPLD_LPC_REG_PWR_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
 		.mask = MLXPLAT_CPLD_PWR_MASK,
 		.count = ARRAY_SIZE(mlxplat_mlxcpld_pwr),
 		.inversed = 0,
@@ -276,7 +279,7 @@ static struct mlxreg_core_item mlxplat_mlxcpld_default_items[] = {
 	{
 		.data = mlxplat_mlxcpld_default_fan_items_data,
 		.aggr_mask = MLXPLAT_CPLD_AGGR_FAN_MASK_DEF,
-		.reg = MLXPLAT_CPLD_LPC_REG_FAN_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
 		.mask = MLXPLAT_CPLD_FAN_MASK,
 		.count = ARRAY_SIZE(mlxplat_mlxcpld_fan),
 		.inversed = 1,
@@ -288,18 +291,39 @@ static
 struct mlxreg_core_hotplug_platform_data mlxplat_mlxcpld_default_data = {
 	.items = mlxplat_mlxcpld_default_items,
 	.counter = ARRAY_SIZE(mlxplat_mlxcpld_default_items),
-	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_ADRR,
+	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_OFF,
 	.mask = MLXPLAT_CPLD_AGGR_MASK_DEF,
 };
 
 /* Platform hotplug MSN21xx system family data */
+static struct i2c_board_info mlxplat_mlxcpld_msn21xx_pwr = {
+	I2C_BOARD_INFO("holder", 0x50),
+};
+
+static struct mlxreg_core_data mlxplat_mlxcpld_msn21xx_pwr_items_data[] = {
+	{
+		.label = "pwr1",
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = BIT(0),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_msn21xx_pwr,
+		.hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR,
+	},
+	{
+		.label = "pwr2",
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = BIT(1),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_msn21xx_pwr,
+		.hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR,
+	},
+};
+
 static struct mlxreg_core_item mlxplat_mlxcpld_msn21xx_items[] = {
 	{
-		.data = mlxplat_mlxcpld_default_pwr_items_data,
+		.data = mlxplat_mlxcpld_msn21xx_pwr_items_data,
 		.aggr_mask = MLXPLAT_CPLD_AGGR_PWR_MASK_DEF,
-		.reg = MLXPLAT_CPLD_LPC_REG_PWR_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
 		.mask = MLXPLAT_CPLD_PWR_MASK,
-		.count = ARRAY_SIZE(mlxplat_mlxcpld_pwr),
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_msn21xx_pwr_items_data),
 		.inversed = 0,
 		.health = false,
 	},
@@ -309,70 +333,307 @@ static
 struct mlxreg_core_hotplug_platform_data mlxplat_mlxcpld_msn21xx_data = {
 	.items = mlxplat_mlxcpld_msn21xx_items,
 	.counter = ARRAY_SIZE(mlxplat_mlxcpld_msn21xx_items),
-	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_ADRR,
+	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_OFF,
 	.mask = MLXPLAT_CPLD_AGGR_MASK_DEF,
+	.cell_low = MLXPLAT_CPLD_LPC_REG_AGGR_LOW_OFF,
+	.mask_low = MLXPLAT_CPLD_LOW_AGGR_MASK_LOW,
+};
+
+/* Platform hotplug MSN201x system family data */
+static struct mlxreg_core_data mlxplat_mlxcpld_msn201x_pwr_items_data[] = {
+	{
+		.label = "pwr1",
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = BIT(0),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_msn21xx_pwr,
+		.hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR,
+	},
+	{
+		.label = "pwr2",
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = BIT(1),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_msn21xx_pwr,
+		.hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR,
+	},
+};
+
+static struct mlxreg_core_item mlxplat_mlxcpld_msn201x_items[] = {
+	{
+		.data = mlxplat_mlxcpld_msn201x_pwr_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_PWR_MASK_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = MLXPLAT_CPLD_PWR_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_msn201x_pwr_items_data),
+		.inversed = 0,
+		.health = false,
+	},
+};
+
+static
+struct mlxreg_core_hotplug_platform_data mlxplat_mlxcpld_msn201x_data = {
+	.items = mlxplat_mlxcpld_msn21xx_items,
+	.counter = ARRAY_SIZE(mlxplat_mlxcpld_msn201x_items),
+	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_OFF,
+	.mask = MLXPLAT_CPLD_AGGR_MASK_DEF,
+	.cell_low = MLXPLAT_CPLD_LPC_REG_AGGR_LOW_OFF,
+	.mask_low = MLXPLAT_CPLD_LOW_AGGR_MASK_LOW,
+};
+
+/* Platform hotplug next generation system family data */
+static struct i2c_board_info mlxplat_mlxcpld_ng_fan = {
+	I2C_BOARD_INFO("holder", 0x50),
+};
+
+static struct mlxreg_core_data mlxplat_mlxcpld_default_ng_psu_items_data[] = {
+	{
+		.label = "psu1",
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
+		.mask = BIT(0),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_psu[0],
+		.hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR,
+	},
+	{
+		.label = "psu2",
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
+		.mask = BIT(1),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_psu[1],
+		.hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR,
+	},
+};
+
+static struct mlxreg_core_data mlxplat_mlxcpld_default_ng_pwr_items_data[] = {
+	{
+		.label = "pwr1",
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = BIT(0),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_pwr[0],
+		.hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR,
+	},
+	{
+		.label = "pwr2",
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = BIT(1),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_pwr[1],
+		.hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR,
+	},
+};
+
+static struct mlxreg_core_data mlxplat_mlxcpld_default_ng_fan_items_data[] = {
+	{
+		.label = "fan1",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(0),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 11,
+	},
+	{
+		.label = "fan2",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(1),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 12,
+	},
+	{
+		.label = "fan3",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(2),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 13,
+	},
+	{
+		.label = "fan4",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(3),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 14,
+	},
+	{
+		.label = "fan5",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(3),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 15,
+	},
+	{
+		.label = "fan6",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(3),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 16,
+	},
+};
+
+static struct mlxreg_core_item mlxplat_mlxcpld_default_ng_items[] = {
+	{
+		.data = mlxplat_mlxcpld_default_ng_psu_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
+		.mask = MLXPLAT_CPLD_PSU_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_psu),
+		.inversed = 1,
+		.health = false,
+	},
+	{
+		.data = mlxplat_mlxcpld_default_ng_pwr_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = MLXPLAT_CPLD_PWR_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_pwr),
+		.inversed = 0,
+		.health = false,
+	},
+	{
+		.data = mlxplat_mlxcpld_default_ng_fan_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = MLXPLAT_CPLD_FAN_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_default_ng_fan_items_data),
+		.inversed = 1,
+		.health = false,
+	},
+};
+
+static
+struct mlxreg_core_hotplug_platform_data mlxplat_mlxcpld_default_ng_data = {
+	.items = mlxplat_mlxcpld_default_ng_items,
+	.counter = ARRAY_SIZE(mlxplat_mlxcpld_default_ng_items),
+	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_OFF,
+	.mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+	.cell_low = MLXPLAT_CPLD_LPC_REG_AGGR_LOW_OFF,
+	.mask_low = MLXPLAT_CPLD_LOW_AGGR_MASK_LOW,
+};
+
+static struct mlxreg_core_data mlxplat_mlxcpld_msn274x_fan_items_data[] = {
+	{
+		.label = "fan1",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(0),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 11,
+	},
+	{
+		.label = "fan2",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(1),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 12,
+	},
+	{
+		.label = "fan3",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(2),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 13,
+	},
+	{
+		.label = "fan4",
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = BIT(3),
+		.hpdev.brdinfo = &mlxplat_mlxcpld_ng_fan,
+		.hpdev.nr = 14,
+	},
+};
+
+static struct mlxreg_core_item mlxplat_mlxcpld_msn274x_items[] = {
+	{
+		.data = mlxplat_mlxcpld_default_ng_psu_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_PSU_OFF,
+		.mask = MLXPLAT_CPLD_PSU_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_psu),
+		.inversed = 1,
+		.health = false,
+	},
+	{
+		.data = mlxplat_mlxcpld_default_ng_pwr_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_PWR_OFF,
+		.mask = MLXPLAT_CPLD_PWR_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_pwr),
+		.inversed = 0,
+		.health = false,
+	},
+	{
+		.data = mlxplat_mlxcpld_msn274x_fan_items_data,
+		.aggr_mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+		.reg = MLXPLAT_CPLD_LPC_REG_FAN_OFF,
+		.mask = MLXPLAT_CPLD_FAN_MASK,
+		.count = ARRAY_SIZE(mlxplat_mlxcpld_msn274x_fan_items_data),
+		.inversed = 1,
+		.health = false,
+	},
+};
+
+static
+struct mlxreg_core_hotplug_platform_data mlxplat_mlxcpld_msn274x_data = {
+	.items = mlxplat_mlxcpld_msn274x_items,
+	.counter = ARRAY_SIZE(mlxplat_mlxcpld_default_ng_items),
+	.cell = MLXPLAT_CPLD_LPC_REG_AGGR_OFF,
+	.mask = MLXPLAT_CPLD_AGGR_MASK_NG_DEF,
+	.cell_low = MLXPLAT_CPLD_LPC_REG_AGGR_LOW_OFF,
+	.mask_low = MLXPLAT_CPLD_LOW_AGGR_MASK_LOW,
 };
 
 /* Platform led default data */
 static struct mlxreg_core_data mlxplat_mlxcpld_default_led_data[] = {
 	{
 		.label = "status:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "status:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK
 	},
 	{
 		.label = "psu:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "psu:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan1:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan1:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan2:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan2:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan3:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan3:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan4:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan4:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 };
@@ -386,47 +647,47 @@ static struct mlxreg_core_led_platform_data mlxplat_default_led_data = {
 static struct mlxreg_core_data mlxplat_mlxcpld_msn21xx_led_data[] = {
 	{
 		.label = "status:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "status:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK
 	},
 	{
 		.label = "fan:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "psu1:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED4_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED4_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "psu1:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED4_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED4_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "psu2:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED4_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED4_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "psu2:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED4_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED4_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "uid:blue",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED5_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED5_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 };
@@ -440,82 +701,82 @@ static struct mlxreg_core_led_platform_data mlxplat_msn21xx_led_data = {
 static struct mlxreg_core_data mlxplat_mlxcpld_default_ng_led_data[] = {
 	{
 		.label = "status:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "status:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK
 	},
 	{
 		.label = "psu:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "psu:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED1_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED1_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan1:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan1:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan2:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan2:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED2_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED2_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan3:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan3:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan4:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan4:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED3_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED3_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan5:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED4_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED4_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan5:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED4_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED4_OFF,
 		.mask = MLXPLAT_CPLD_LED_LO_NIBBLE_MASK,
 	},
 	{
 		.label = "fan6:green",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED5_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED5_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 	{
 		.label = "fan6:red",
-		.reg = MLXPLAT_CPLD_LPC_REG_LED5_ADRR,
+		.reg = MLXPLAT_CPLD_LPC_REG_LED5_OFF,
 		.mask = MLXPLAT_CPLD_LED_HI_NIBBLE_MASK,
 	},
 };
@@ -587,10 +848,6 @@ static int __init mlxplat_dmi_msn21xx_matched(const struct dmi_system_id *dmi)
 
 static int __init mlxplat_dmi_msn274x_matched(const struct dmi_system_id *dmi)
 {
-	struct mlxreg_core_data *data_psu =
-					mlxplat_mlxcpld_default_psu_items_data;
-	struct mlxreg_core_data *data_pwr =
-					mlxplat_mlxcpld_default_pwr_items_data;
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(mlxplat_mux_data); i++) {
@@ -598,24 +855,14 @@ static int __init mlxplat_dmi_msn274x_matched(const struct dmi_system_id *dmi)
 		mlxplat_mux_data[i].n_values =
 				ARRAY_SIZE(mlxplat_msn21xx_channels);
 	}
-	for (i = 0; i < ARRAY_SIZE(mlxplat_mlxcpld_default_psu_items_data);
-	     i++, data_psu++)
-		data_psu->hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR;
-	for (i = 0; i < ARRAY_SIZE(mlxplat_mlxcpld_default_pwr_items_data);
-	     i++, data_pwr++)
-		data_pwr->hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR;
-	mlxplat_hotplug = &mlxplat_mlxcpld_default_data;
-	mlxplat_led = &mlxplat_default_ng_led_data;
+	mlxplat_hotplug = &mlxplat_mlxcpld_msn274x_data;
+	mlxplat_led = &mlxplat_default_led_data;
 
 	return 1;
 };
 
 static int __init mlxplat_dmi_qmb7xx_matched(const struct dmi_system_id *dmi)
 {
-	struct mlxreg_core_data *data_psu =
-					mlxplat_mlxcpld_default_psu_items_data;
-	struct mlxreg_core_data *data_pwr =
-					mlxplat_mlxcpld_default_pwr_items_data;
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(mlxplat_mux_data); i++) {
@@ -623,14 +870,7 @@ static int __init mlxplat_dmi_qmb7xx_matched(const struct dmi_system_id *dmi)
 		mlxplat_mux_data[i].n_values =
 				ARRAY_SIZE(mlxplat_msn21xx_channels);
 	}
-	mlxplat_mlxcpld_default_items[2].mask = MLXPLAT_CPLD_FAN_NG_MASK;
-	for (i = 0; i < ARRAY_SIZE(mlxplat_mlxcpld_default_psu_items_data);
-	     i++, data_psu++)
-		data_psu->hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR;
-	for (i = 0; i < ARRAY_SIZE(mlxplat_mlxcpld_default_pwr_items_data);
-	     i++, data_pwr++)
-		data_pwr->hpdev.nr = MLXPLAT_CPLD_PSU_MSNXXXX_NR;
-	mlxplat_hotplug = &mlxplat_mlxcpld_default_data;
+	mlxplat_hotplug = &mlxplat_mlxcpld_default_ng_data;
 	mlxplat_led = &mlxplat_default_ng_led_data;
 
 	return 1;
@@ -638,8 +878,6 @@ static int __init mlxplat_dmi_qmb7xx_matched(const struct dmi_system_id *dmi)
 
 static int __init mlxplat_dmi_msn201x_matched(const struct dmi_system_id *dmi)
 {
-	struct mlxreg_core_data *data_pwr =
-					mlxplat_mlxcpld_default_pwr_items_data;
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(mlxplat_mux_data); i++) {
@@ -647,10 +885,7 @@ static int __init mlxplat_dmi_msn201x_matched(const struct dmi_system_id *dmi)
 		mlxplat_mux_data[i].n_values =
 				ARRAY_SIZE(mlxplat_msn21xx_channels);
 	}
-	for (i = 0; i < ARRAY_SIZE(mlxplat_mlxcpld_default_pwr_items_data);
-	     i++, data_pwr++)
-		data_pwr->hpdev.nr = MLXPLAT_CPLD_PSU_DEFAULT_NR;
-	mlxplat_hotplug = &mlxplat_mlxcpld_msn21xx_data;
+	mlxplat_hotplug = &mlxplat_mlxcpld_msn201x_data;
 	mlxplat_led = &mlxplat_msn21xx_led_data;
 
 	return 1;
@@ -658,6 +893,13 @@ static int __init mlxplat_dmi_msn201x_matched(const struct dmi_system_id *dmi)
 
 static struct dmi_system_id mlxplat_dmi_table[] __initdata = {
 	{
+		.callback = mlxplat_dmi_msn274x_matched,
+		.matches = {
+			DMI_MATCH(DMI_BOARD_VENDOR, "Mellanox Technologies"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "MSN274"),
+		},
+	},
+	{
 		.callback = mlxplat_dmi_default_matched,
 		.matches = {
 			DMI_MATCH(DMI_BOARD_VENDOR, "Mellanox Technologies"),
@@ -693,13 +935,6 @@ static struct dmi_system_id mlxplat_dmi_table[] __initdata = {
 		},
 	},
 	{
-		.callback = mlxplat_dmi_msn274x_matched,
-		.matches = {
-			DMI_MATCH(DMI_BOARD_VENDOR, "Mellanox Technologies"),
-			DMI_MATCH(DMI_PRODUCT_NAME, "MSN274"),
-		},
-	},
-	{
 		.callback = mlxplat_dmi_msn201x_matched,
 		.matches = {
 			DMI_MATCH(DMI_BOARD_VENDOR, "Mellanox Technologies"),
diff --git a/include/linux/platform_data/mlxreg.h b/include/linux/platform_data/mlxreg.h
index 456b805..dd471c5 100644
--- a/include/linux/platform_data/mlxreg.h
+++ b/include/linux/platform_data/mlxreg.h
@@ -125,6 +125,8 @@ struct mlxreg_core_led_platform_data {
  * @counter: number of the components with the hotplug capability;
  * @cell: location of top aggregation interrupt register;
  * @mask: top aggregation interrupt common mask;
+ * @cell_low: location of low aggregation interrupt register;
+ * @mask_low: low aggregation interrupt common mask;
  */
 struct mlxreg_core_hotplug_platform_data {
 	struct mlxreg_core_item *items;
@@ -133,6 +135,8 @@ struct mlxreg_core_hotplug_platform_data {
 	int counter;
 	u32 cell;
 	u32 mask;
+	u32 cell_low;
+	u32 mask_low;
 };
 
 #endif /* __LINUX_PLATFORM_DATA_MLXREG_H */
-- 
2.1.4

