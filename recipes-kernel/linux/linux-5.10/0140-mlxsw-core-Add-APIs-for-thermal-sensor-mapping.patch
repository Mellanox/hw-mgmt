From 3614c1e72e48e03c64ce88d269d97ee4743f9cc4 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Mon, 13 Dec 2021 12:29:10 +0000
Subject: [PATCH backport 5.10 140/182] mlxsw: core: Add APIs for thermal
 sensor mapping

Add APIs mlxsw_env_sensor_map_init() and mlxsw_env_sensor_map_fini(().
The purpose of the first one is to allocate and create thermal sensors
mapping for temperature sensors, presented within the main board or
line card. It obtains mapping information from the Management
Temperature Extended Capabilities Register, by specifying the relevant
device by the number of a slot at which this device is located. Slot
zero is used for the main board. The second API just free allocated
memory.
The motivation is to create dynamic mapping for gearbox thermal sensors
access.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 .../net/ethernet/mellanox/mlxsw/core_env.c    | 47 +++++++++++++++++++
 .../net/ethernet/mellanox/mlxsw/core_env.h    | 12 +++++
 2 files changed, 59 insertions(+)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_env.c b/drivers/net/ethernet/mellanox/mlxsw/core_env.c
index 4553dfa68f96..4f3fc25af013 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_env.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_env.c
@@ -624,6 +624,53 @@ mlxsw_env_set_module_power_mode(struct mlxsw_core *mlxsw_core, u8 slot_index,
 }
 EXPORT_SYMBOL(mlxsw_env_set_module_power_mode);
 
+int mlxsw_env_sensor_map_create(struct mlxsw_core *core,
+				const struct mlxsw_bus_info *bus_info,
+				u8 slot_index,
+				struct mlxsw_env_gearbox_sensors_map *map)
+{
+	char mtecr_pl[MLXSW_REG_MTECR_LEN];
+	u16 last_sensor, offset;
+	int i, bit, err;
+
+	mlxsw_reg_mtecr_pack(mtecr_pl, slot_index);
+	err = mlxsw_reg_query(core, MLXSW_REG(mtecr), mtecr_pl);
+	if (err)
+		return err;
+
+	mlxsw_reg_mtecr_unpack(mtecr_pl, &map->sensor_count, &last_sensor, NULL);
+	if (!map->sensor_count) {
+		map->sensor_bit_map = NULL;
+		return 0;
+	}
+
+	/* Fill out sensor mapping array. */
+	map->sensor_bit_map = kcalloc(map->sensor_count, sizeof(u16), GFP_KERNEL);
+	if (!map->sensor_bit_map)
+		return -ENOMEM;
+
+	/* Sensors bitmap is size variable based on the last_sensor field and
+	 * in granularity of 32 bits. Calculate an offset in payload buffer to
+	 * start from.
+	 */
+	offset = MLXSW_REG_MTECR_SENSOR_MAP_LEN * 8 - last_sensor - 1;
+	offset -= offset % 32;
+	for (bit = 0, i = 0; bit <= last_sensor && i < map->sensor_count; bit++) {
+		if (mlxsw_reg_mtecr_sensor_map_get(mtecr_pl, bit + offset))
+			map->sensor_bit_map[i++] = bit;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(mlxsw_env_sensor_map_create);
+
+void mlxsw_env_sensor_map_destroy(const struct mlxsw_bus_info *bus_info,
+				  u16 *sensor_bit_map)
+{
+	kfree(sensor_bit_map);
+}
+EXPORT_SYMBOL(mlxsw_env_sensor_map_destroy);
+
 static int mlxsw_env_module_has_temp_sensor(struct mlxsw_core *mlxsw_core,
 					    u8 slot_index, u8 module,
 					    bool *p_has_temp_sensor)
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_env.h b/drivers/net/ethernet/mellanox/mlxsw/core_env.h
index 03d027870d65..336c9ee579cb 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_env.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_env.h
@@ -9,6 +9,11 @@
 struct ethtool_modinfo;
 struct ethtool_eeprom;
 
+struct mlxsw_env_gearbox_sensors_map {
+	u16 sensor_count;
+	u16 *sensor_bit_map;
+};
+
 int mlxsw_env_module_temp_thresholds_get(struct mlxsw_core *core,
 					 u8 slot_index, int module, int off,
 					 int *temp);
@@ -21,6 +26,13 @@ int mlxsw_env_get_module_eeprom(struct net_device *netdev,
 				int module, struct ethtool_eeprom *ee,
 				u8 *data);
 
+int mlxsw_env_sensor_map_create(struct mlxsw_core *core,
+				const struct mlxsw_bus_info *bus_info,
+				u8 slot_index,
+				struct mlxsw_env_gearbox_sensors_map *map);
+void mlxsw_env_sensor_map_destroy(const struct mlxsw_bus_info *bus_info,
+				  u16 *sensor_bit_map);
+
 int
 mlxsw_env_get_module_eeprom_by_page(struct mlxsw_core *mlxsw_core,
 				    u8 slot_index, u8 module,
-- 
2.20.1

