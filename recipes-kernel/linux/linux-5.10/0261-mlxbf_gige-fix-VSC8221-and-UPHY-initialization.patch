From dcc02028e77a537ca76867e02b9703c2621f8c73 Mon Sep 17 00:00:00 2001
From: David Thompson <davthompson@nvidia.com>
Date: Wed, 7 Dec 2022 10:44:20 -0500
Subject: [PATCH backport 5.10 62/63] mlxbf_gige: fix VSC8221 and UPHY
 initialization

This patch fixes several issues with VSC8221 PHY
and UPHY initialization that prevent "oob_net0"
interface from coming up properly.

There are two config changes to VSC8221 PHY:
1) Change the PHY operating mode to
   "Modified Clause 37 Auto-Negotiation disabled,
   625MHz SCLK Clock Disabled".  This change overwrites
   the CMODE hardware strapping config setting of
   "625Mhz SCLK Clock Disabled"
2) Change SIGDET Pin Direction to Output

There are two config changes to UPHY:
1) Use T4 clock (hardcoded 200Mhz) for UPHY config
2) Set "tx_drv_amp_fw" to 1 to increase TX drv amplitude

The driver version is bumped to 2.1 to indicate
the working driver version.

RM #3267386

Change-Id: I43b04bece66d73cae83d50390d7e158507fc2707
---
 .../mellanox/mlxbf_gige/mlxbf_gige_main.c     | 24 +++++++++++++++++++
 .../mellanox/mlxbf_gige/mlxbf_gige_uphy.c     | 13 ++++++++++
 .../mellanox/mlxbf_gige/mlxbf_gige_uphy.h     |  3 +++
 3 files changed, 40 insertions(+)

diff --git a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c
index 197ec8ccb..af7caed11 100644
--- a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c
+++ b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_main.c
@@ -20,6 +20,8 @@
 #include "mlxbf_gige_regs.h"
 #include "mlxbf_gige_uphy.h"
 
+#define DRV_VERSION 2.1
+
 #define MLXBF_GIGE_BF2_COREPLL_ADDR 0x02800c30
 #define MLXBF_GIGE_BF2_COREPLL_SIZE 0x0000000c
 #define MLXBF_GIGE_BF3_COREPLL_ADDR 0x13409824
@@ -508,6 +510,27 @@ static int mlxbf_gige_probe(struct platform_device *pdev)
 		goto out;
 	}
 
+	// Initialize VSC8221 state, eventually move out of here
+	{
+		u16 val;
+
+		val = 0xba20;
+		dev_dbg(priv->dev, "Changing PHY mode: write 0x%04x to 0x17", val);
+		phy_write(phydev, 0x17, val);
+
+		val = phy_read(phydev, 0) | 0x8000;
+		dev_dbg(priv->dev, "Resetting PHY: write 0x%04x to 0", val);
+		phy_write(phydev, 0, val);
+
+		// 31.6 Software Reset Time - we should only need 4us
+		udelay(10);
+
+		dev_dbg(priv->dev, "Changing SIGDET pin direction to Output");
+		phy_write(phydev, 31, 1);
+		phy_write(phydev, 19, 2);
+		phy_write(phydev, 31, 0);
+	}
+
 	addr = phydev->mdio.addr;
 	priv->mdiobus->irq[addr] = phy_irq;
 	phydev->irq = phy_irq;
@@ -581,4 +604,5 @@ MODULE_DESCRIPTION("Mellanox BlueField SoC Gigabit Ethernet Driver");
 MODULE_AUTHOR("David Thompson <davthompson@nvidia.com>");
 MODULE_AUTHOR("Asmaa Mnebhi <asmaa@nvidia.com>");
 MODULE_LICENSE("Dual BSD/GPL");
+MODULE_VERSION(__stringify(DRV_VERSION));
 
diff --git a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.c b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.c
index 9d64eb886..4c4d902e8 100644
--- a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.c
+++ b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.c
@@ -491,7 +491,11 @@ static void mlxbf_gige_ugl_static_config(struct mlxbf_gige *priv)
 	p1clk_mhz = div_u64(p1clk, 1000000);
 
 	/* Multiply the p1clk clock by 12 according to HW requirements */
+#if 0
 	const_factor = p1clk_mhz * MLXBF_GIGE_P1CLK_MULT_FACTOR;
+#else
+	const_factor = 200 * MLXBF_GIGE_P1CLK_MULT_FACTOR;
+#endif
 
 	/* ugl_cr_bridge_desc */
 	val = readl(priv->plu_base + MLXBF_GIGE_UGL_CR_BRIDGE_DESC);
@@ -603,6 +607,10 @@ static void mlxbf_gige_ugl_static_config(struct mlxbf_gige *priv)
 	val |= FIELD_PREP(MLXBF_GIGE_LANE_PWR_GOV0_FALL_MASK,
 			  MLXBF_GIGE_LANE_PWR_GOV0_FALL_VAL(const_factor));
 	writel(val, priv->plu_base + MLXBF_GIGE_LANE_PWR_GOV0);
+
+	val = readl(priv->plu_base + MLXBF_GIGE_LANE_TX);
+	val |= MLXBF_GIGE_LANE_TX_DRV_AMP_FW;
+	writel(val, priv->plu_base + MLXBF_GIGE_LANE_TX);
 }
 
 static int mlxbf_gige_uphy_gw_write(struct mlxbf_gige *priv, u16 addr,
@@ -1128,6 +1136,7 @@ static int mlxbf_gige_rx_lane_open(struct mlxbf_gige *priv)
 
 static bool mlxbf_gige_is_uphy_ready(struct mlxbf_gige *priv)
 {
+#if 0
 	u32 val;
 
 	val = readl(priv->plu_base + MLXBF_GIGE_LANE_TX_FSM_CTRL);
@@ -1139,6 +1148,10 @@ static bool mlxbf_gige_is_uphy_ready(struct mlxbf_gige *priv)
 		return false;
 
 	return true;
+#else
+	// for now, force UPHY config to be re-done in Linux
+	return false;
+#endif
 }
 
 int mlxbf_gige_config_uphy(struct mlxbf_gige *priv)
diff --git a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.h b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.h
index a32be2407..b301f01f0 100644
--- a/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.h
+++ b/drivers/net/ethernet/mellanox/mlxbf_gige/mlxbf_gige_uphy.h
@@ -97,6 +97,9 @@
 #define MLXBF_GIGE_LANE_GW_DESC0           0x2610c
 #define MLXBF_GIGE_LANE_GW_DESC0_DATA_MASK GENMASK(15, 0)
 
+#define MLXBF_GIGE_LANE_TX                 0x26020
+#define MLXBF_GIGE_LANE_TX_DRV_AMP_FW      GENMASK(8,8)
+
 #define MLXBF_GIGE_TX_FSM_DEFAULT_CYCLES     0x26600
 #define MLXBF_GIGE_TX_FSM_DEFAULT_VAL(const_factor) \
 	((200 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
-- 
2.20.1

