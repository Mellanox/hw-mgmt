From e2620e9dd2487c7e4b23e58a89de492997c78602 Mon Sep 17 00:00:00 2001
From: Matt Johnston <matt@codeconstruct.com.au>
Date: Thu, 14 Oct 2021 14:42:10 +0800
Subject: [PATCH backport 5.10 31/73] mctp: Avoid leak of mctp_sk_key

mctp_key_alloc() returns a key already referenced.

The mctp_route_input() path receives a packet for a bind socket and
allocates a key. It passes the key to mctp_key_add() which takes a
refcount and adds the key to lists. mctp_route_input() should then
release its own refcount when setting the key pointer to NULL.

In the mctp_alloc_local_tag() path (for mctp_local_output()) we
similarly need to unref the key before returning (mctp_reserve_tag()
takes a refcount and adds the key to lists).

Fixes: 73c618456dc5 ("mctp: locking, lifetime and validity changes for sk_keys")
Signed-off-by: Matt Johnston <matt@codeconstruct.com.au>
Reviewed-by: Jeremy Kerr <jk@codeconstruct.com.au>

---
v2:
- "Fixes:" revid was short
- Send with correct [net-next] subject
- No changes to patch.
---
 net/mctp/route.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/net/mctp/route.c b/net/mctp/route.c
index e20f3096d067..887a2dc638d3 100644
--- a/net/mctp/route.c
+++ b/net/mctp/route.c
@@ -371,6 +371,7 @@ static int mctp_route_input(struct mctp_route *route, struct sk_buff *skb)
 			trace_mctp_key_acquire(key);
 
 			/* we don't need to release key->lock on exit */
+			mctp_key_unref(key);
 			key = NULL;
 
 		} else {
@@ -583,6 +584,9 @@ static int mctp_alloc_local_tag(struct mctp_sock *msk,
 		trace_mctp_key_acquire(key);
 
 		*tagp = key->tag;
+		/* done with the key in this scope */
+		mctp_key_unref(key);
+		key = NULL;
 		rc = 0;
 	}
 
-- 
2.20.1

