From ae1963650fa7234a47497fe948da40a60cba0821 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Fri, 12 May 2023 06:28:18 +0000
Subject: [PATCH backport 5.10 05/10] DBG: i2c: mlxcpld: COME BF3 debug

To be merged to previous two TMP patches.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/i2c/busses/i2c-mlxcpld.c         |  16 +--
 drivers/platform/mellanox/mlx-platform.c | 139 ++++++++++++++---------
 2 files changed, 90 insertions(+), 65 deletions(-)

diff --git a/drivers/i2c/busses/i2c-mlxcpld.c b/drivers/i2c/busses/i2c-mlxcpld.c
index 18176bdbc..27a7c75b1 100644
--- a/drivers/i2c/busses/i2c-mlxcpld.c
+++ b/drivers/i2c/busses/i2c-mlxcpld.c
@@ -69,7 +69,7 @@ struct  mlxcpld_i2c_curr_xfer {
 
 struct mlxcpld_i2c_priv {
 	struct i2c_adapter adap;
-	u64 base_addr;
+	u32 base_addr;
 	void __iomem *addr;
 	struct mutex lock;
 	struct  mlxcpld_i2c_curr_xfer xfer;
@@ -101,7 +101,7 @@ static void mlxcpld_i2c_lpc_read_buf_ioport(u8 *data, u8 len, u32 addr)
 static void mlxcpld_i2c_read_comm_ioport(struct mlxcpld_i2c_priv *priv, u8 offs,
 					 u8 *data, u8 datalen)
 {
-	u64 addr = priv->base_addr + offs;
+	u32 addr = priv->base_addr + offs;
 
 	switch (datalen) {
 	case 1:
@@ -126,7 +126,7 @@ static void mlxcpld_i2c_read_comm_ioport(struct mlxcpld_i2c_priv *priv, u8 offs,
 static void mlxcpld_i2c_write_comm_ioport(struct mlxcpld_i2c_priv *priv, u8 offs,
 					  u8 *data, u8 datalen)
 {
-	u64 addr = priv->base_addr + offs;
+	u32 addr = priv->base_addr + offs;
 
 	switch (datalen) {
 	case 1:
@@ -180,10 +180,6 @@ static void mlxcpld_i2c_read_comm_io(struct mlxcpld_i2c_priv *priv, u8 offs,
 	case 2:
 		*((u16 *)data) = ioread16(addr);
 		break;
-	case 3:
-		*((u16 *)data) = ioread16(addr);
-		*(data + 2) = ioread8(addr + 2);
-		break;
 	default:
 		mlxcpld_i2c_lpc_read_buf_io(data, datalen, addr);
 		break;
@@ -202,10 +198,6 @@ static void mlxcpld_i2c_write_comm_io(struct mlxcpld_i2c_priv *priv, u8 offs,
 	case 2:
 		iowrite16(*((u16 *)data), addr);
 		break;
-	case 3:
-		iowrite16(*((u16 *)data), addr);
-		iowrite8(*(data + 2), addr + 2);
-		break;
 	default:
 		mlxcpld_i2c_lpc_write_buf_io(data, datalen, addr);
 		break;
@@ -628,7 +620,7 @@ static int mlxcpld_i2c_probe(struct platform_device *pdev)
 	if (pdata) {
 		if (pdata->addr)
 			priv->addr = pdata->addr;
-			
+
 		err = mlxcpld_i2c_set_frequency(priv, pdata);
 		if (err)
 			goto mlxcpld_i2_probe_failed;
diff --git a/drivers/platform/mellanox/mlx-platform.c b/drivers/platform/mellanox/mlx-platform.c
index 72823ad92..e303b8e5a 100644
--- a/drivers/platform/mellanox/mlx-platform.c
+++ b/drivers/platform/mellanox/mlx-platform.c
@@ -38,12 +38,12 @@
 #define MLXPLAT_CPLD_LPC_REG_CPLD3_PN1_OFFSET	0x09
 #define MLXPLAT_CPLD_LPC_REG_CPLD4_PN_OFFSET	0x0a
 #define MLXPLAT_CPLD_LPC_REG_CPLD4_PN1_OFFSET	0x0b
+#define MLXPLAT_CPLD_LPC_REG_RESET_GP1_OFFSET	0x17
 #define MLXPLAT_CPLD_LPC_REG_RESET_GP2_OFFSET	0x19
 #define MLXPLAT_CPLD_LPC_REG_RESET_GP4_OFFSET	0x1c
 #define MLXPLAT_CPLD_LPC_REG_RESET_CAUSE_OFFSET	0x1d
 #define MLXPLAT_CPLD_LPC_REG_RST_CAUSE1_OFFSET	0x1e
 #define MLXPLAT_CPLD_LPC_REG_RST_CAUSE2_OFFSET	0x1f
-#define MLXPLAT_CPLD_LPC_REG_PG_RST_OFFSET	0x19
 #define MLXPLAT_CPLD_LPC_REG_LED1_OFFSET	0x20
 #define MLXPLAT_CPLD_LPC_REG_LED2_OFFSET	0x21
 #define MLXPLAT_CPLD_LPC_REG_LED3_OFFSET	0x22
@@ -185,6 +185,7 @@
 #define MLXPLAT_CPLD_LPC_REG_CONFIG2_OFFSET	0xfc
 #define MLXPLAT_CPLD_LPC_REG_CONFIG3_OFFSET	0xfd
 #define MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET	0x100
+#define MLXPLAT_CPLD_LPC_REG_EXT_MID_OFFSET	0x195
 #define MLXPLAT_CPLD_LPC_REG_EXT_MAX_OFFSET	0x1ff
 #define MLXPLAT_CPLD_LPC_IO_RANGE		0x100
 
@@ -327,7 +328,6 @@
 #define MLXPLAT_CPLD_WD_MAX_DEVS	2
 
 #define MLXPLAT_CPLD_LPC_SYSIRQ		17
-#define MLXPLAT_FPGA_PCIE_SYSIRQ	17
 
 /* Minimum power required for turning on Ethernet modular system (WATT) */
 #define MLXPLAT_CPLD_ETH_MODULAR_PWR_MIN	50
@@ -392,6 +392,7 @@ struct mlxplat_priv {
 
 static struct platform_device *mlxplat_dev;
 static int mlxplat_i2c_main_complition_notify(void *handle, int id);
+static void __iomem *i2c_bridge_addr, *jtag_bridge_addr;
 
 /* Regions for LPC I2C controller and LPC base register space */
 static const struct resource mlxplat_lpc_resources[] = {
@@ -3809,6 +3810,12 @@ static struct mlxreg_core_data mlxplat_mlxcpld_default_ng_regs_io_data[] = {
 		.mask = GENMASK(7, 0) & ~BIT(2),
 		.mode = 0444,
 	},
+	{
+		.label = "kexec_activated",
+		.reg = MLXPLAT_CPLD_LPC_REG_RESET_GP2_OFFSET,
+		.mask = GENMASK(7, 0) & ~BIT(1),
+		.mode = 0644,
+	},
 	{
 		.label = "erot1_reset",
 		.reg = MLXPLAT_CPLD_LPC_REG_RESET_GP2_OFFSET,
@@ -3869,6 +3876,12 @@ static struct mlxreg_core_data mlxplat_mlxcpld_default_ng_regs_io_data[] = {
 		.mask = GENMASK(7, 0) & ~BIT(2),
 		.mode = 0444,
 	},
+	{
+		.label = "reset_swb_dc_dc_pwr_fail",
+		.reg = MLXPLAT_CPLD_LPC_REG_RESET_CAUSE_OFFSET,
+		.mask = GENMASK(7, 0) & ~BIT(3),
+		.mode = 0444,
+	},
 	{
 		.label = "reset_from_asic",
 		.reg = MLXPLAT_CPLD_LPC_REG_RESET_CAUSE_OFFSET,
@@ -5339,9 +5352,9 @@ static struct mlxreg_core_platform_data mlxplat_mlxcpld_wd_set_type3[] = {
 static bool mlxplat_mlxcpld_writeable_reg(struct device *dev, unsigned int reg)
 {
 	switch (reg) {
+	case MLXPLAT_CPLD_LPC_REG_RESET_GP1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RESET_GP4_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED1_OFFSET:
-	case MLXPLAT_CPLD_LPC_REG_PG_RST_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED2_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED3_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED4_OFFSET:
@@ -5358,6 +5371,7 @@ static bool mlxplat_mlxcpld_writeable_reg(struct device *dev, unsigned int reg)
 	case MLXPLAT_CPLD_LPC_SAFE_BIOS_OFFSET:
 	case MLXPLAT_CPLD_LPC_SAFE_BIOS_WP_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_AGGR_MASK_OFFSET:
+	case MLXPLAT_CPLD_LPC_REG_FU_CAP_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_DBG1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_DBG2_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_DBG3_OFFSET:
@@ -5448,12 +5462,12 @@ static bool mlxplat_mlxcpld_readable_reg(struct device *dev, unsigned int reg)
 	case MLXPLAT_CPLD_LPC_REG_CPLD4_PN1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_CPLD5_PN_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_CPLD5_PN1_OFFSET:
+	case MLXPLAT_CPLD_LPC_REG_RESET_GP1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RESET_GP4_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RESET_CAUSE_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RST_CAUSE1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RST_CAUSE2_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED1_OFFSET:
-	case MLXPLAT_CPLD_LPC_REG_PG_RST_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED2_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED3_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED4_OFFSET:
@@ -5610,14 +5624,16 @@ static bool mlxplat_mlxcpld_volatile_reg(struct device *dev, unsigned int reg)
 	case MLXPLAT_CPLD_LPC_REG_CPLD2_PN1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_CPLD3_PN_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_CPLD3_PN1_OFFSET:
+	case MLXPLAT_CPLD_LPC_REG_CPLD4_PN_OFFSET:
+	case MLXPLAT_CPLD_LPC_REG_CPLD4_PN1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_CPLD5_PN_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_CPLD5_PN1_OFFSET:
+	case MLXPLAT_CPLD_LPC_REG_RESET_GP1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RESET_GP4_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RESET_CAUSE_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RST_CAUSE1_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_RST_CAUSE2_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED1_OFFSET:
-	case MLXPLAT_CPLD_LPC_REG_PG_RST_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED2_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED3_OFFSET:
 	case MLXPLAT_CPLD_LPC_REG_LED4_OFFSET:
@@ -5937,16 +5953,24 @@ static int mlxplat_fpga_reg_read(void *context, unsigned int reg, unsigned int *
 	unsigned int msb_off = MLXPLAT_FPGA_PCI_MSB_ADDR;
 	int err;
 
+	if (reg >= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET) {
+		if (reg <= MLXPLAT_CPLD_LPC_REG_EXT_MID_OFFSET) {
+			/* Access to 2-nd FPGA bank */
+			*val = ioread8(i2c_bridge_addr + reg -
+				       MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET);
+			return 0;
+		}
+		/* Access to 3-rd FPGA bank */
+		reg -= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET;
+		msb_off = MLXPLAT_FPGA_PCI_MSB_EXT_ADDR;
+	}
+
 	/* Verify there is no pending transactions */
 	err = mlxplat_fpga_completion_wait(ctx);
 	if (err)
 		return err;
 
 	/* Set address in register space */
-	if (reg >= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET) {
-		reg -= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET;
-		msb_off = MLXPLAT_FPGA_PCI_MSB_EXT_ADDR;
-	}
 	iowrite8(msb_off, ctx->base + MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET);
 	iowrite8(reg, ctx->base + MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET);
 	/* Activate read operation */
@@ -5969,17 +5993,26 @@ static int mlxplat_fpga_reg_write(void *context, unsigned int reg, unsigned int
 	unsigned int msb_off = MLXPLAT_FPGA_PCI_MSB_ADDR;
 	int err;
 
+	if (reg >= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET) {
+		if (reg <= MLXPLAT_CPLD_LPC_REG_EXT_MID_OFFSET) {
+			/* Access to 2-nd FPGA bank */
+			iowrite8(val, i2c_bridge_addr + reg - MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET);
+			/* Flush modification */
+			wmb();
+			return 0;
+		}
+
+		/* Access to 3-rd FPGA bank */
+		reg -= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET;
+		msb_off = MLXPLAT_FPGA_PCI_MSB_EXT_ADDR;
+	}
+
 	/* Verify there is no pending transactions */
 	err = mlxplat_fpga_completion_wait(ctx);
 	if (err)
 		return err;
 
 	/* Set address in register space */
-	/* Set address in register space */
-	if (reg >= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET) {
-		reg -= MLXPLAT_CPLD_LPC_REG_EXT_MIN_OFFSET;
-		msb_off = MLXPLAT_FPGA_PCI_MSB_EXT_ADDR;
-	}
 	iowrite8(msb_off, ctx->base + MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET);
 	iowrite8(reg, ctx->base + MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET);
 	/* Set data to be written */
@@ -6008,11 +6041,6 @@ static struct resource mlxplat_mlxcpld_resources[] = {
 	[0] = DEFINE_RES_IRQ_NAMED(MLXPLAT_CPLD_LPC_SYSIRQ, "mlxreg-hotplug"),
 };
 
-static struct resource mlxplat_mlxfpga_resources[] = {
-	[0] = DEFINE_RES_IRQ_NAMED(MLXPLAT_FPGA_PCIE_SYSIRQ, "mlxreg-hotplug"),
-};
-
-static struct platform_device *mlxplat_dev;
 static struct mlxreg_core_hotplug_platform_data *mlxplat_i2c;
 static struct mlxreg_core_hotplug_platform_data *mlxplat_hotplug;
 static struct mlxreg_core_platform_data *mlxplat_led;
@@ -6025,15 +6053,18 @@ static struct spi_board_info *mlxplat_spi;
 static struct pci_dev *lpc_bridge;
 static struct pci_dev *i2c_bridge;
 static struct pci_dev *jtag_bridge;
-void __iomem *i2c_bridge_addr, *jtag_bridge_addr;
 
 /* Platform default reset function */
 static int mlxplat_reboot_notifier(struct notifier_block *nb, unsigned long action, void *unused)
 {
 	struct mlxplat_priv *priv = platform_get_drvdata(mlxplat_dev);
+	u32 regval;
+	int ret;
+
+	ret = regmap_read(priv->regmap, MLXPLAT_CPLD_LPC_REG_RESET_GP1_OFFSET, &regval);
 
-	if (action == SYS_RESTART)
-		regmap_write(priv->regmap, MLXPLAT_CPLD_LPC_REG_PG_RST_OFFSET,
+	if (action == SYS_RESTART && !ret && !(regval & BIT(0)))
+		regmap_write(priv->regmap, MLXPLAT_CPLD_LPC_REG_RESET_GP2_OFFSET,
 			     MLXPLAT_CPLD_RESET_MASK);
 
 	return NOTIFY_DONE;
@@ -6054,6 +6085,17 @@ static void mlxplat_poweroff(void)
 	kernel_halt();
 }
 
+static int __init mlxplat_register_platform_device(void)
+{
+	mlxplat_dev = platform_device_register_simple(MLX_PLAT_DEVICE_NAME, -1,
+						      mlxplat_lpc_resources,
+						      ARRAY_SIZE(mlxplat_lpc_resources));
+	if (IS_ERR(mlxplat_dev))
+		return PTR_ERR(mlxplat_dev);
+	else
+		return 1;
+}
+
 static int __init mlxplat_dmi_default_matched(const struct dmi_system_id *dmi)
 {
 	int i;
@@ -6074,7 +6116,7 @@ static int __init mlxplat_dmi_default_matched(const struct dmi_system_id *dmi)
 	mlxplat_wd_data[0] = &mlxplat_mlxcpld_wd_set_type1[0];
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_default_data;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_default_wc_matched(const struct dmi_system_id *dmi)
@@ -6097,7 +6139,7 @@ static int __init mlxplat_dmi_default_wc_matched(const struct dmi_system_id *dmi
 	mlxplat_wd_data[0] = &mlxplat_mlxcpld_wd_set_type1[0];
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_default_data;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_default_eth_wc_blade_matched(const struct dmi_system_id *dmi)
@@ -6122,7 +6164,7 @@ static int __init mlxplat_dmi_default_eth_wc_blade_matched(const struct dmi_syst
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_ng;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_msn21xx_matched(const struct dmi_system_id *dmi)
@@ -6145,7 +6187,7 @@ static int __init mlxplat_dmi_msn21xx_matched(const struct dmi_system_id *dmi)
 	mlxplat_wd_data[0] = &mlxplat_mlxcpld_wd_set_type1[0];
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_default_data;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_msn274x_matched(const struct dmi_system_id *dmi)
@@ -6168,7 +6210,7 @@ static int __init mlxplat_dmi_msn274x_matched(const struct dmi_system_id *dmi)
 	mlxplat_wd_data[0] = &mlxplat_mlxcpld_wd_set_type1[0];
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_default_data;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_msn201x_matched(const struct dmi_system_id *dmi)
@@ -6191,7 +6233,7 @@ static int __init mlxplat_dmi_msn201x_matched(const struct dmi_system_id *dmi)
 	mlxplat_wd_data[0] = &mlxplat_mlxcpld_wd_set_type1[0];
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_default_data;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_qmb7xx_matched(const struct dmi_system_id *dmi)
@@ -6217,7 +6259,7 @@ static int __init mlxplat_dmi_qmb7xx_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_ng;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_comex_matched(const struct dmi_system_id *dmi)
@@ -6242,7 +6284,7 @@ static int __init mlxplat_dmi_comex_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_default_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_comex;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_ng400_matched(const struct dmi_system_id *dmi)
@@ -6268,7 +6310,7 @@ static int __init mlxplat_dmi_ng400_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_ng400;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_modular_matched(const struct dmi_system_id *dmi)
@@ -6288,7 +6330,7 @@ static int __init mlxplat_dmi_modular_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_eth_modular;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_chassis_blade_matched(const struct dmi_system_id *dmi)
@@ -6310,7 +6352,7 @@ static int __init mlxplat_dmi_chassis_blade_matched(const struct dmi_system_id *
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_ng400;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_qmb8700_matched(const struct dmi_system_id *dmi)
@@ -6336,7 +6378,7 @@ static int __init mlxplat_dmi_qmb8700_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_ng;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_rack_switch_matched(const struct dmi_system_id *dmi)
@@ -6358,7 +6400,7 @@ static int __init mlxplat_dmi_rack_switch_matched(const struct dmi_system_id *dm
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_rack_switch;
 	mlxplat_spi = rack_switch_switch_spi_board_info;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_ng800_matched(const struct dmi_system_id *dmi)
@@ -6379,7 +6421,7 @@ static int __init mlxplat_dmi_ng800_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_ng400;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_l1_switch_matched(const struct dmi_system_id *dmi)
@@ -6400,9 +6442,10 @@ static int __init mlxplat_dmi_l1_switch_matched(const struct dmi_system_id *dmi)
 	mlxplat_i2c = &mlxplat_mlxcpld_i2c_ng_data;
 	mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config_rack_switch;
 	pm_power_off = mlxplat_poweroff;
+	mlxplat_reboot_nb = &mlxplat_reboot_default_nb;
 	mlxplat_spi = rack_switch_switch_spi_board_info;
 
-	return 1;
+	return mlxplat_register_platform_device();
 }
 
 static int __init mlxplat_dmi_bf3_comex_default_matched(const struct dmi_system_id *dmi)
@@ -6530,12 +6573,6 @@ static const struct dmi_system_id mlxplat_dmi_table[] __initconst = {
 			DMI_MATCH(DMI_BOARD_NAME, "VMOD0016"),
 		},
 	},
-	{
-		.callback = mlxplat_dmi_bf3_comex_default_matched,
-		.matches = {
-			DMI_EXACT_MATCH(DMI_PRODUCT_SKU, "HI151"),
-		},
-	},
 	{
 		.callback = mlxplat_dmi_l1_switch_matched,
 		.matches = {
@@ -6707,13 +6744,11 @@ static int mlxplat_lpc_cpld_device_init(struct resource **hotplug_resources,
 	return 0;
 
 fail_devm_ioport_map:
-	platform_device_unregister(mlxplat_dev);
 	return err;
 }
 
 static void mlxplat_lpc_cpld_device_exit(void)
 {
-	platform_device_unregister(mlxplat_dev);
 }
 
 static int
@@ -6781,7 +6816,6 @@ mlxplat_pci_fpga_device_exit(struct pci_dev *pci_bridge,
 	pci_release_regions(pci_bridge);
 	pci_disable_device(pci_bridge);
 }
-\
 
 static int
 mlxplat_pci_fpga_devices_init(struct resource **hotplug_resources,
@@ -6807,9 +6841,6 @@ mlxplat_pci_fpga_devices_init(struct resource **hotplug_resources,
 	if (err)
 		goto mlxplat_pci_fpga_device_init_jtag_fail;
 
-	*hotplug_resources = mlxplat_mlxfpga_resources;
-	*hotplug_resources_size = ARRAY_SIZE(mlxplat_mlxfpga_resources);
-
 	return 0;
 
 mlxplat_pci_fpga_device_init_jtag_fail:
@@ -6854,7 +6885,8 @@ static int mlxplat_post_init(struct mlxplat_priv *priv)
 	/* Add hotplug driver */
 	if (mlxplat_hotplug) {
 		mlxplat_hotplug->regmap = priv->regmap;
-		mlxplat_hotplug->irq = priv->irq_fpga;
+		if (priv->irq_fpga)
+			mlxplat_hotplug->irq = priv->irq_fpga;
 		priv->pdev_hotplug =
 		platform_device_register_resndata(&mlxplat_dev->dev,
 						  "mlxreg-hotplug", PLATFORM_DEVID_NONE,
@@ -7107,8 +7139,8 @@ static void mlxplat_i2c_main_exit(struct mlxplat_priv *priv)
 
 static int mlxplat_probe(struct platform_device *pdev)
 {
-	unsigned int hotplug_resources_size;
-	struct resource *hotplug_resources;
+	unsigned int hotplug_resources_size = 0;
+	struct resource *hotplug_resources = NULL;
 	struct acpi_device *acpi_dev;
 	struct mlxplat_priv *priv;
 	int irq_fpga = 0, i, err;
@@ -7118,13 +7150,13 @@ static int mlxplat_probe(struct platform_device *pdev)
 		irq_fpga = acpi_dev_gpio_irq_get(acpi_dev, 0);
 		if (irq_fpga < 0)
 			return -ENODEV;
+		mlxplat_dev = pdev;
 	}
 
 	err = mlxplat_pre_init(&hotplug_resources, &hotplug_resources_size);
 	if (err)
 		return err;
 
-	mlxplat_dev = pdev;
 	priv = devm_kzalloc(&mlxplat_dev->dev, sizeof(struct mlxplat_priv),
 			    GFP_KERNEL);
 	if (!priv) {
@@ -7138,6 +7170,7 @@ static int mlxplat_probe(struct platform_device *pdev)
 
 	if (!mlxplat_regmap_config)
 		mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config;
+
 	priv->regmap = devm_regmap_init(&mlxplat_dev->dev, NULL,
 					&mlxplat_mlxcpld_regmap_ctx,
 					mlxplat_regmap_config);
-- 
2.20.1

