From 90d4f1a2cbdd5ea18a6b5fc2b71adc0bbf4cb8a1 Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Fri, 12 May 2023 06:28:18 +0000
Subject: [PATCH DBG 1/1] DBG: i2c: mlxcpld: COME BF3 debug

To be merged to previous two TMP patches.

Signed-off-by: Vadim Pasternak <vadimp@nvidia.com>
---
 drivers/i2c/busses/i2c-mlxcpld.c         |   6 +-
 drivers/platform/mellanox/mlx-platform.c | 179 ++++++++++++++++-------
 2 files changed, 125 insertions(+), 60 deletions(-)

diff --git a/drivers/i2c/busses/i2c-mlxcpld.c b/drivers/i2c/busses/i2c-mlxcpld.c
index 1e095c2ab..6efe794d8 100644
--- a/drivers/i2c/busses/i2c-mlxcpld.c
+++ b/drivers/i2c/busses/i2c-mlxcpld.c
@@ -53,8 +53,6 @@
 #define MLXCPLD_I2C_FREQ_400KHZ_SET	0x0e
 #define MLXCPLD_I2C_FREQ_100KHZ_SET	0x42
 
-#define MLXCPLD_I2C_PCI_IO_OFFSET	0x400
-
 enum mlxcpld_i2c_frequency {
 	MLXCPLD_I2C_FREQ_1000KHZ = 1,
 	MLXCPLD_I2C_FREQ_400KHZ = 2,
@@ -173,7 +171,7 @@ static void mlxcpld_i2c_lpc_read_buf_io(u8 *data, u8 len, void __iomem *addr)
 static void mlxcpld_i2c_read_comm_io(struct mlxcpld_i2c_priv *priv, u8 offs,
 				     u8 *data, u8 datalen)
 {
-	void __iomem *addr = priv->addr + MLXCPLD_I2C_PCI_IO_OFFSET + offs;
+	void __iomem *addr = priv->addr + offs;
 
 	switch (datalen) {
 	case 1:
@@ -198,7 +196,7 @@ static void mlxcpld_i2c_read_comm_io(struct mlxcpld_i2c_priv *priv, u8 offs,
 static void mlxcpld_i2c_write_comm_io(struct mlxcpld_i2c_priv *priv, u8 offs,
 				      u8 *data, u8 datalen)
 {
-	void __iomem *addr = priv->addr + MLXCPLD_I2C_PCI_IO_OFFSET + offs;
+	void __iomem *addr = priv->addr + offs;
 
 	switch (datalen) {
 	case 1:
diff --git a/drivers/platform/mellanox/mlx-platform.c b/drivers/platform/mellanox/mlx-platform.c
index d86168685..0aa0f97de 100644
--- a/drivers/platform/mellanox/mlx-platform.c
+++ b/drivers/platform/mellanox/mlx-platform.c
@@ -334,7 +334,9 @@
 
 /* Lattice FPGA PCI configuration */
 #define PCI_VENDOR_ID_LATTICE			0x1204
-#define PCI_DEVICE_ID_LATTICE_LFD2NX40		0x9c1d
+#define PCI_DEVICE_ID_LATTICE_I2C_BRIDGE	0x9c2f
+#define PCI_DEVICE_ID_LATTICE_JTAG_BRIDGE	0x9c30
+#define PCI_DEVICE_ID_LATTICE_LPC_BRIDGE	0x9c32
 #define MLXPLAT_FPGA_PCI_BAR0_SIZE		0x4000
 #define MLXPLAT_FPGA_PCI_BASE_OFFSET		0x00000000
 #define MLXPLAT_FPGA_PCI_MSB_ADDR		0x25
@@ -5877,12 +5879,13 @@ static int mlxplat_fpga_completion_wait(struct mlxplat_mlxcpld_regmap_context *c
 	end = jiffies + msecs_to_jiffies(MLXPLAT_FPGA_PCI_TO);
 	do {
 		status = ioread8(ctx->base + MLXPLAT_FPGA_PCI_STAT_OFFSET);
+//printk("%s(%d) READ STATUS base %pS read %pS off 0x%08x status value 0x%08x\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_STAT_OFFSET, MLXPLAT_FPGA_PCI_STAT_OFFSET, status);
 		if (!(status & MLXPLAT_FPGA_PCI_COMPLETED))
 			return 0;
 		cond_resched();
 	} while (time_before(jiffies, end));
-
-	return -EIO;
+//printk("%s(%d) offset 0x%08x status 0x%08x - ignore!!!!\n", __func__, __LINE__, MLXPLAT_FPGA_PCI_STAT_OFFSET, status);
+	/*return -EIO;*/return 0;
 }
 
 /* Read callback for indirect register map access */
@@ -5898,9 +5901,12 @@ static int mlxplat_fpga_reg_read(void *context, unsigned int reg, unsigned int *
 
 	/* Set address in register space */
 	iowrite8(MLXPLAT_FPGA_PCI_MSB_ADDR, ctx->base + MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET);
+//printk("%s(%d) WRITE ADDR base %pS at %pS off 0x%08x value 0x%08x\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET, MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET, MLXPLAT_FPGA_PCI_MSB_ADDR);
 	iowrite8(reg, ctx->base + MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET);
+//printk("%s(%d) WRITE ADDR base %pS at %pS off 0x%08x value 0x%08x\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET, MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET, reg);
 	/* Activate read operation */
 	iowrite8(MLXPLAT_FPGA_PCI_CTRL_READ, ctx->base + MLXPLAT_FPGA_PCI_CTRL_OFFSET);
+//printk("%s(%d) WRITE ACTIVATE READ base %pS at %pS off 0x%08x value 0x%08lx\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_CTRL_OFFSET, MLXPLAT_FPGA_PCI_CTRL_OFFSET, MLXPLAT_FPGA_PCI_CTRL_READ);
 	/* Verify transaction completion */
 	err = mlxplat_fpga_completion_wait(ctx);
 	if (err)
@@ -5908,6 +5914,7 @@ static int mlxplat_fpga_reg_read(void *context, unsigned int reg, unsigned int *
 
 	/* Read data */
 	*val = ioread8(ctx->base + MLXPLAT_FPGA_PCI_DATA_IN_OFFSET);
+//printk("%s(%d) READ VALUE base %pS at %pS off 0x%08x status value 0x%08x\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_DATA_IN_OFFSET, MLXPLAT_FPGA_PCI_DATA_IN_OFFSET, *val);
 
 	return 0;
 }
@@ -5925,19 +5932,22 @@ static int mlxplat_fpga_reg_write(void *context, unsigned int reg, unsigned int
 
 	/* Set address in register space */
 	iowrite8(MLXPLAT_FPGA_PCI_MSB_ADDR, ctx->base + MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET);
+//printk("%s(%d) WRITE ADDR base %pS at %pS off 0x%08x status value 0x%08x\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET, MLXPLAT_FPGA_PCI_MSB_ADDR_OFFSET, MLXPLAT_FPGA_PCI_MSB_ADDR);
 	iowrite8(reg, ctx->base + MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET);
+//printk("%s(%d) WRITE ADDR base %pS at %pS off 0x%08x status value 0x%08x\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET, MLXPLAT_FPGA_PCI_LSB_ADDR_OFFSET, reg);
 	/* Set data to be written */
 	iowrite8(val, ctx->base + MLXPLAT_FPGA_PCI_DATA_OUT_OFFSET);
 	/* Activate write operation */
 	iowrite8(MLXPLAT_FPGA_PCI_CTRL_WRITE, ctx->base + MLXPLAT_FPGA_PCI_CTRL_OFFSET);
+//printk("%s(%d) WRITE ACTIVATE WRITE base %pS at %pS off 0x%08x status value 0x%08lx\n", __func__, __LINE__, ctx->base, ctx->base + MLXPLAT_FPGA_PCI_CTRL_OFFSET, MLXPLAT_FPGA_PCI_CTRL_OFFSET, MLXPLAT_FPGA_PCI_CTRL_WRITE);
 
 	return 0;
 }
 
 static const struct regmap_config mlxplat_fpga_regmap_config_bf3_comex_default = {
-	.reg_bits = 16,
+	.reg_bits = 8,
 	.val_bits = 8,
-	.max_register = 512,
+	.max_register = 255,
 	.cache_type = REGCACHE_FLAT,
 	.writeable_reg = mlxplat_mlxcpld_writeable_reg,
 	.readable_reg = mlxplat_mlxcpld_readable_reg,
@@ -5966,7 +5976,10 @@ static struct mlxreg_core_platform_data
 	*mlxplat_wd_data[MLXPLAT_CPLD_WD_MAX_DEVS];
 static const struct regmap_config *mlxplat_regmap_config;
 static struct spi_board_info *mlxplat_spi;
-static struct pci_dev *fpga_dev;
+static struct pci_dev *lpc_bridge;
+static struct pci_dev *i2c_bridge;
+static struct pci_dev *jtag_bridge;
+void __iomem *i2c_bridge_addr, *jtag_bridge_addr;
 
 /* Platform default reset function */
 static int mlxplat_reboot_notifier(struct notifier_block *nb, unsigned long action, void *unused)
@@ -6366,7 +6379,7 @@ static int __init mlxplat_dmi_bf3_comex_default_matched(const struct dmi_system_
 	mlxplat_regmap_config = &mlxplat_fpga_regmap_config_bf3_comex_default;
 	mlxplat_reboot_nb = &mlxplat_reboot_default_nb;
 	pm_power_off = mlxplat_poweroff;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	return 1;
 }
 
@@ -6634,13 +6647,14 @@ static int mlxplat_lpc_cpld_device_init(struct resource **hotplug_resources,
 					unsigned int *hotplug_resources_size)
 {
 	int err;
-
+printk("%s(%d)\n", __func__, __LINE__);
+#if 0
 	mlxplat_dev = platform_device_register_simple(MLX_PLAT_DEVICE_NAME, PLATFORM_DEVID_NONE,
 						      mlxplat_lpc_resources,
 						      ARRAY_SIZE(mlxplat_lpc_resources));
 	if (IS_ERR(mlxplat_dev))
 		return PTR_ERR(mlxplat_dev);
-
+#endif
 	mlxplat_mlxcpld_regmap_ctx.base = devm_ioport_map(&mlxplat_dev->dev,
 							  mlxplat_lpc_resources[1].start, 1);
 	if (!mlxplat_mlxcpld_regmap_ctx.base) {
@@ -6664,13 +6678,14 @@ static void mlxplat_lpc_cpld_device_exit(void)
 }
 
 static int
-mlxplat_pci_fpga_device_init(struct resource **hotplug_resources,
-			     unsigned int *hotplug_resources_size, struct pci_dev **fpga_dev)
+mlxplat_pci_fpga_device_init(unsigned int device, const char *res_name, struct pci_dev **pci_bridge,
+			     void __iomem **pci_bridge_addr)
 {
+	void __iomem *pci_mem_addr;
 	struct pci_dev *pci_dev;
 	int err;
-
-	pci_dev = pci_get_device(PCI_VENDOR_ID_LATTICE, PCI_DEVICE_ID_LATTICE_LFD2NX40, NULL);
+printk("%s(%d) PCI %s\n",__func__, __LINE__, res_name);
+	pci_dev = pci_get_device(PCI_VENDOR_ID_LATTICE, device, NULL);
 	if (!pci_dev)
 		return -ENODEV;
 
@@ -6680,7 +6695,7 @@ mlxplat_pci_fpga_device_init(struct resource **hotplug_resources,
 		goto fail_pci_enable_device;
 	}
 
-	err = pci_request_region(pci_dev, 0, "mlxplat_fpga");
+	err = pci_request_region(pci_dev, 0, res_name);
 	if (err) {
 		dev_err(&pci_dev->dev, "pci_request_regions failed with error %d\n", err);
 		goto fail_pci_request_regions;
@@ -6695,31 +6710,22 @@ mlxplat_pci_fpga_device_init(struct resource **hotplug_resources,
 		}
 	}
 
-	if (pci_resource_len(pci_dev, 0) < MLXPLAT_FPGA_PCI_BAR0_SIZE) {
-		dev_err(&mlxplat_dev->dev, "invalid PCI region size\n");
-		err = -EINVAL;
-		goto fail_pci_resource_len_check;
-	}
+	pci_set_master(pci_dev);
 
-	mlxplat_mlxcpld_regmap_ctx.base = devm_ioremap(&pci_dev->dev,
-						       pci_resource_start(pci_dev, 0),
-						       pci_resource_len(pci_dev, 0));
-	if (!mlxplat_mlxcpld_regmap_ctx.base) {
+	pci_mem_addr = devm_ioremap(&pci_dev->dev, pci_resource_start(pci_dev, 0),
+				    pci_resource_len(pci_dev, 0));
+	if (!pci_mem_addr) {
 		dev_err(&mlxplat_dev->dev, "ioremap failed\n");
 		err = -EIO;
 		goto fail_ioremap;
 	}
 
-	pci_set_master(pci_dev);
-
-	*hotplug_resources = mlxplat_mlxfpga_resources;
-	*hotplug_resources_size = ARRAY_SIZE(mlxplat_mlxfpga_resources);
-	*fpga_dev = pci_dev;
-
+	*pci_bridge = pci_dev;
+	*pci_bridge_addr = pci_mem_addr;
+printk("%s(%d) size %lld base %pS \n",__func__, __LINE__, pci_resource_len(pci_dev, 0), pci_mem_addr);
 	return 0;
 
 fail_ioremap:
-fail_pci_resource_len_check:
 fail_pci_set_dma_mask:
 	pci_release_regions(pci_dev);
 fail_pci_request_regions:
@@ -6728,20 +6734,73 @@ mlxplat_pci_fpga_device_init(struct resource **hotplug_resources,
 	return err;
 }
 
-static void mlxplat_pci_fpga_device_exit(void)
+static void
+mlxplat_pci_fpga_device_exit(struct pci_dev *pci_bridge,
+			     void __iomem *pci_bridge_addr)
 {
-	platform_device_unregister(mlxplat_dev);
-	iounmap(mlxplat_mlxcpld_regmap_ctx.base);
-	pci_release_regions(fpga_dev);
-	pci_disable_device(fpga_dev);
+	iounmap(pci_bridge_addr);
+	pci_release_regions(pci_bridge);
+	pci_disable_device(pci_bridge);
 }
+\
 
 static int
-mlxplat_pre_init(struct resource **hotplug_resources, unsigned int *hotplug_resources_size)
+mlxplat_pci_fpga_devices_init(struct resource **hotplug_resources,
+			      unsigned int *hotplug_resources_size)
 {
 	int err;
+printk("%s(%d)\n",__func__, __LINE__);
+
+	err = mlxplat_pci_fpga_device_init(PCI_DEVICE_ID_LATTICE_LPC_BRIDGE,
+					   "mlxplat_lpc_bridge", &lpc_bridge,
+					   &mlxplat_mlxcpld_regmap_ctx.base);
+	if (err)
+		goto mlxplat_pci_fpga_device_init_lpc_fail;
+
+	err = mlxplat_pci_fpga_device_init(PCI_DEVICE_ID_LATTICE_I2C_BRIDGE,
+					   "mlxplat_i2c_bridge", &i2c_bridge,
+					    &i2c_bridge_addr);
+	if (err)
+		goto mlxplat_pci_fpga_device_init_i2c_fail;
+
+	err = mlxplat_pci_fpga_device_init(PCI_DEVICE_ID_LATTICE_JTAG_BRIDGE,
+					   "mlxplat_jtag_bridge", &jtag_bridge,
+					    &jtag_bridge_addr);
+	if (err)
+		goto mlxplat_pci_fpga_device_init_jtag_fail;
+
+	*hotplug_resources = mlxplat_mlxfpga_resources;
+	*hotplug_resources_size = ARRAY_SIZE(mlxplat_mlxfpga_resources);
+printk("%s(%d)\n",__func__, __LINE__);
+	return 0;
 
-	err = mlxplat_pci_fpga_device_init(hotplug_resources, hotplug_resources_size, &fpga_dev);
+mlxplat_pci_fpga_device_init_jtag_fail:
+	mlxplat_pci_fpga_device_exit(i2c_bridge, i2c_bridge_addr);
+mlxplat_pci_fpga_device_init_i2c_fail:
+	mlxplat_pci_fpga_device_exit(lpc_bridge, mlxplat_mlxcpld_regmap_ctx.base);
+mlxplat_pci_fpga_device_init_lpc_fail:
+	return err;
+}
+
+static void mlxplat_pci_fpga_devices_exit(void)
+{
+printk("%s(%d)\n", __func__, __LINE__);
+	/* platform_device_unregister(mlxplat_dev); */
+printk("%s(%d)\n", __func__, __LINE__);
+	mlxplat_pci_fpga_device_exit(jtag_bridge, jtag_bridge_addr);
+printk("%s(%d)\n", __func__, __LINE__);
+	mlxplat_pci_fpga_device_exit(i2c_bridge, i2c_bridge_addr);
+printk("%s(%d)\n", __func__, __LINE__);
+	mlxplat_pci_fpga_device_exit(lpc_bridge, mlxplat_mlxcpld_regmap_ctx.base);
+printk("%s(%d)\n", __func__, __LINE__);
+}
+
+static int
+mlxplat_pre_init(struct resource **hotplug_resources, unsigned int *hotplug_resources_size)
+{
+	int err;
+printk("%s(%d)\n", __func__, __LINE__);
+	err = mlxplat_pci_fpga_devices_init(hotplug_resources, hotplug_resources_size);
 	if (err == -ENODEV)
 		return mlxplat_lpc_cpld_device_init(hotplug_resources, hotplug_resources_size);
 
@@ -6750,8 +6809,9 @@ mlxplat_pre_init(struct resource **hotplug_resources, unsigned int *hotplug_reso
 
 static void mlxplat_post_exit(void)
 {
-	if (fpga_dev)
-		mlxplat_pci_fpga_device_exit();
+printk("%s(%d)\n", __func__, __LINE__);
+	if (lpc_bridge)
+		mlxplat_pci_fpga_devices_exit();
 	else
 		mlxplat_lpc_cpld_device_exit();
 }
@@ -6969,21 +7029,22 @@ static int mlxplat_i2c_main_complition_notify(void *handle, int id)
 static int mlxplat_i2c_main_init(struct mlxplat_priv *priv)
 {
 	int nr, err;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	if (!mlxplat_i2c)
 		return 0;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	err = mlxplat_mlxcpld_verify_bus_topology(&nr);
 	if (nr < 0)
 		goto fail_mlxplat_mlxcpld_verify_bus_topology;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	nr = (nr == mlxplat_max_adap_num) ? -1 : nr;
 	mlxplat_i2c->regmap = priv->regmap;
 	mlxplat_i2c->handle = priv;
 
 	/* Set mapped base address of I2C-LPC bridge over PCIe */
-	if (fpga_dev)
-		mlxplat_i2c->addr = mlxplat_mlxcpld_regmap_ctx.base;
+	if (lpc_bridge)
+		mlxplat_i2c->addr = i2c_bridge_addr;
+printk("%s(%d) addr base 0x%08x addr 0x%08x base %p addr %p\n", __func__, __LINE__, ((*(u32 *)mlxplat_mlxcpld_regmap_ctx.base)), ((*(u32 *)mlxplat_i2c->addr)), mlxplat_mlxcpld_regmap_ctx.base, mlxplat_i2c->addr);
 	priv->pdev_i2c = platform_device_register_resndata(&mlxplat_dev->dev, "i2c_mlxcpld",
 							   nr, priv->hotplug_resources,
 							   priv->hotplug_resources_size,
@@ -7021,9 +7082,10 @@ static int mlxplat_probe(struct platform_device *pdev)
 	struct acpi_device *acpi_dev;
 	struct mlxplat_priv *priv;
 	int irq_fpga = 0, i, err;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	acpi_dev = ACPI_COMPANION(&pdev->dev);
 	if (acpi_dev) {
+printk("%s(%d)\n", __func__, __LINE__);
 		irq_fpga = acpi_dev_gpio_irq_get(acpi_dev, 0);
 		if (irq_fpga < 0)
 			return -ENODEV;
@@ -7032,14 +7094,14 @@ static int mlxplat_probe(struct platform_device *pdev)
 	err = mlxplat_pre_init(&hotplug_resources, &hotplug_resources_size);
 	if (err)
 		return err;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	mlxplat_dev = pdev;
 	priv = devm_kzalloc(&mlxplat_dev->dev, sizeof(struct mlxplat_priv),
 			    GFP_KERNEL);
 	if (!priv) {
 		err = -ENOMEM;
 		goto fail_alloc;
-	}
+	}printk("%s(%d)\n", __func__, __LINE__);
 	platform_set_drvdata(mlxplat_dev, priv);
 	priv->hotplug_resources = hotplug_resources;
 	priv->hotplug_resources_size = hotplug_resources_size;
@@ -7047,7 +7109,7 @@ static int mlxplat_probe(struct platform_device *pdev)
 
 	if (!mlxplat_regmap_config)
 		mlxplat_regmap_config = &mlxplat_mlxcpld_regmap_config;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	priv->regmap = devm_regmap_init(&mlxplat_dev->dev, NULL,
 					&mlxplat_mlxcpld_regmap_ctx,
 					mlxplat_regmap_config);
@@ -7055,20 +7117,25 @@ static int mlxplat_probe(struct platform_device *pdev)
 		err = PTR_ERR(priv->regmap);
 		goto fail_alloc;
 	}
-
+printk("%s(%d) priv->regmap %p\n", __func__, __LINE__, priv->regmap);
 	/* Set default registers. */
 	for (i = 0; i <  mlxplat_regmap_config->num_reg_defaults; i++) {
+printk("%s(%d) i %d\n", __func__, __LINE__, i);
 		err = regmap_write(priv->regmap,
 				   mlxplat_regmap_config->reg_defaults[i].reg,
 				   mlxplat_regmap_config->reg_defaults[i].def);
 		if (err)
 			goto fail_regmap_write;
 	}
-
+printk("%s(%d)\n", __func__, __LINE__);
+{
+	for(i = 0; i <=5; i++)
+		printk("%s(%d) off %pS value 0x%08x\n", __func__, __LINE__, mlxplat_mlxcpld_regmap_ctx.base + i, ioread8(mlxplat_mlxcpld_regmap_ctx.base + i));
+}
 	err = mlxplat_i2c_main_init(priv);
 	if (err)
 		goto fail_mlxplat_i2c_main_init;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	/* Sync registers with hardware. */
 	regcache_mark_dirty(priv->regmap);
 	err = regcache_sync(priv->regmap);
@@ -7080,7 +7147,7 @@ static int mlxplat_probe(struct platform_device *pdev)
 		if (err)
 			goto fail_register_reboot_notifier;
 	}
-
+printk("%s(%d)\n", __func__, __LINE__);
 	return 0;
 
 fail_register_reboot_notifier:
@@ -7097,7 +7164,7 @@ static int mlxplat_probe(struct platform_device *pdev)
 static int mlxplat_remove(struct platform_device *pdev)
 {
 	struct mlxplat_priv *priv = platform_get_drvdata(mlxplat_dev);
-
+printk("%s(%d)\n", __func__, __LINE__);
 	if (pm_power_off)
 		pm_power_off = NULL;
 	if (mlxplat_reboot_nb)
@@ -7127,14 +7194,14 @@ static struct platform_driver mlxplat_driver = {
 static int __init mlxplat_init(void)
 {
 	int err;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	if (!dmi_check_system(mlxplat_dmi_table))
 		return -ENODEV;
-
+printk("%s(%d)\n", __func__, __LINE__);
 	err = platform_driver_register(&mlxplat_driver);
 	if (err)
 		return err;
-	return 0;
+	return 0;printk("%s(%d)\n", __func__, __LINE__);
 }
 module_init(mlxplat_init);
 
-- 
2.20.1

