From e7379493c9f7e30f7d20459ed07a435095e9a889 Mon Sep 17 00:00:00 2001
From: Jiri Pirko <jiri@nvidia.com>
Date: Fri, 22 Jan 2021 14:45:06 +0100
Subject: [PATCH backport 5.10 136/182] mlxsw: core_linecards: Implement line
 card activation process

Allow to process events generated upon line card getting "ready" and
"active".

Signed-off-by: Jiri Pirko <jiri@nvidia.com>
---
 drivers/net/ethernet/mellanox/mlxsw/core.h    |  3 +
 .../ethernet/mellanox/mlxsw/core_linecards.c  | 85 +++++++++++++++++--
 2 files changed, 80 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlxsw/core.h b/drivers/net/ethernet/mellanox/mlxsw/core.h
index d3c5d8289a85..ecd91bb8ca77 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.h
@@ -521,6 +521,9 @@ struct mlxsw_linecard {
 	char read_name[MLXSW_REG_MDDQ_SLOT_ACII_NAME_LEN];
 	char mbct_pl[MLXSW_REG_MBCT_LEN]; /* too big for stack */
 	bool provisioned;
+	bool ready;
+	bool active;
+	bool unprovision_done;
 };
 
 struct mlxsw_linecard_types_info;
diff --git a/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c b/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
index a324ce2436e8..134437f49219 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_linecards.c
@@ -67,6 +67,8 @@ static const char *mlxsw_linecard_type_name(struct mlxsw_linecard *linecard)
 static void mlxsw_linecard_provision_fail(struct mlxsw_linecard *linecard)
 {
 	linecard->provisioned = false;
+	linecard->ready = false;
+	linecard->active = false;
 	devlink_linecard_provision_fail(linecard->devlink_linecard);
 }
 
@@ -94,10 +96,51 @@ static void mlxsw_linecard_provision_clear(struct mlxsw_linecard *linecard)
 	devlink_linecard_provision_clear(linecard->devlink_linecard);
 }
 
+static int mlxsw_linecard_ready_set(struct mlxsw_core *mlxsw_core,
+				    struct mlxsw_linecard *linecard)
+{
+	char mddc_pl[MLXSW_REG_MDDC_LEN];
+	int err;
+
+	mlxsw_reg_mddc_pack(mddc_pl, linecard->slot_index, false, true);
+	err = mlxsw_reg_write(mlxsw_core, MLXSW_REG(mddc), mddc_pl);
+	if (err)
+		return err;
+	linecard->ready = true;
+	return 0;
+}
+
+static int mlxsw_linecard_ready_clear(struct mlxsw_core *mlxsw_core,
+				      struct mlxsw_linecard *linecard)
+{
+	char mddc_pl[MLXSW_REG_MDDC_LEN];
+	int err;
+
+	mlxsw_reg_mddc_pack(mddc_pl, linecard->slot_index, false, false);
+	err = mlxsw_reg_write(mlxsw_core, MLXSW_REG(mddc), mddc_pl);
+	if (err)
+		return err;
+	linecard->ready = false;
+	return 0;
+}
+
+static void mlxsw_linecard_active_set(struct mlxsw_linecard *linecard)
+{
+	linecard->active = true;
+	devlink_linecard_activate(linecard->devlink_linecard);
+}
+
+static void mlxsw_linecard_active_clear(struct mlxsw_linecard *linecard)
+{
+	linecard->active = false;
+	devlink_linecard_deactivate(linecard->devlink_linecard);
+}
+
 static int __mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
 					   struct mlxsw_linecards *linecards,
 					   struct mlxsw_linecard *linecard,
-					   const char *mddq_pl)
+					   const char *mddq_pl,
+					   bool process_provision_only)
 {
 	enum mlxsw_reg_mddq_card_type card_type;
 	enum mlxsw_reg_mddq_ready ready;
@@ -132,6 +175,27 @@ static int __mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
 			goto out;
 	}
 
+	if (!process_provision_only && !linecard->unprovision_done &&
+	    ready == MLXSW_REG_MDDQ_READY_READY && !linecard->ready) {
+		err = mlxsw_linecard_ready_set(mlxsw_core, linecard);
+		if (err)
+			goto out;
+	}
+
+	if (!process_provision_only && !linecard->unprovision_done && active &&
+	    linecard->active != active && linecard->ready)
+		mlxsw_linecard_active_set(linecard);
+
+	if (!process_provision_only && !active && linecard->active != active)
+		mlxsw_linecard_active_clear(linecard);
+
+	if (!process_provision_only && ready != MLXSW_REG_MDDQ_READY_READY &&
+	    linecard->ready) {
+		err = mlxsw_linecard_ready_clear(mlxsw_core, linecard);
+		if (err)
+			goto out;
+	}
+
 	if (!provisioned && linecard->provisioned != provisioned)
 		mlxsw_linecard_provision_clear(linecard);
 
@@ -146,13 +210,14 @@ int mlxsw_linecard_status_process(struct mlxsw_core *mlxsw_core,
 	struct mlxsw_linecards *linecards = mlxsw_core_linecards(mlxsw_core);
 
 	return __mlxsw_linecard_status_process(mlxsw_core, linecards, NULL,
-					       mddq_pl);
+					       mddq_pl, false);
 }
 EXPORT_SYMBOL(mlxsw_linecard_status_process);
 
 static int mlxsw_linecard_status_get_and_process(struct mlxsw_core *mlxsw_core,
 						 struct mlxsw_linecards *linecards,
-						 struct mlxsw_linecard *linecard)
+						 struct mlxsw_linecard *linecard,
+						 bool process_provision_only)
 {
 	char mddq_pl[MLXSW_REG_MDDQ_LEN];
 	int err;
@@ -163,7 +228,7 @@ static int mlxsw_linecard_status_get_and_process(struct mlxsw_core *mlxsw_core,
 		return err;
 
 	return __mlxsw_linecard_status_process(mlxsw_core, linecards, linecard,
-					       mddq_pl);
+					       mddq_pl, process_provision_only);
 }
 
 static int __mlxsw_linecard_fix_fsm_state(struct mlxsw_linecard *linecard)
@@ -308,6 +373,7 @@ static int mlxsw_linecard_provision(struct devlink_linecard *devlink_linecard,
 
 	mutex_lock(&linecard->lock);
 
+	linecard->unprovision_done = false;
 	linecards = linecard->linecards;
 	mlxsw_core = linecards->mlxsw_core;
 	mlxsw_reg_mbct_pack(linecard->mbct_pl, linecard->slot_index,
@@ -416,6 +482,7 @@ static int mlxsw_linecard_unprovision(struct devlink_linecard *devlink_linecard,
 		NL_SET_ERR_MSG_MOD(extack, "Failed to erase linecard INI while being used");
 		goto fix_fsm_err_out;
 	}
+	linecard->unprovision_done = true;
 	goto out;
 
 fix_fsm_err_out:
@@ -478,7 +545,7 @@ static int mlxsw_linecard_init(struct mlxsw_core *mlxsw_core,
 	linecard->devlink_linecard = devlink_linecard;
 
 	err = mlxsw_linecard_status_get_and_process(mlxsw_core, linecards,
-						    linecard);
+						    linecard, true);
 	if (err)
 		goto err_status_get_and_process;
 
@@ -514,7 +581,7 @@ static int mlxsw_linecard_post_init(struct mlxsw_core *mlxsw_core,
 		return err;
 
 	err = mlxsw_linecard_status_get_and_process(mlxsw_core, linecards,
-						    linecard);
+						    linecard, false);
 	if (err)
 		goto err_status_get_and_process;
 
@@ -533,6 +600,10 @@ static void mlxsw_linecard_pre_fini(struct mlxsw_core *mlxsw_core,
 
 	linecard = mlxsw_linecard_get(linecards, slot_index);
 	mlxsw_linecard_event_delivery_set(mlxsw_core, linecard, false);
+	/* Make sure all scheduled events are processed */
+	mlxsw_core_flush_owq();
+	if (linecard->active)
+		mlxsw_linecard_active_clear(linecard);
 }
 
 static void mlxsw_linecard_fini(struct mlxsw_core *mlxsw_core,
@@ -754,8 +825,6 @@ void mlxsw_linecards_pre_fini(struct mlxsw_core *mlxsw_core,
 		return;
 	for (i = 0; i < linecards->count; i++)
 		mlxsw_linecard_pre_fini(mlxsw_core, linecards, i + 1);
-	/* Make sure all scheduled events are processed */
-	mlxsw_core_flush_owq();
 }
 
 void mlxsw_linecards_fini(struct mlxsw_core *mlxsw_core,
-- 
2.20.1

