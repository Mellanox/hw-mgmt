From d439a8e75600c9919c8f1380c18a5141d271412a Mon Sep 17 00:00:00 2001
From: Vadim Pasternak <vadimp@nvidia.com>
Date: Sat, 9 Oct 2021 08:49:14 +0000
Subject: [PATCH backport 5.10 087/182] hwmon: Add support for EMC2305
 RPM-based PWM Fan Speed Controller

Introduce EMC2305 RPM-based PWM Fan Speed Controller
The EMC2305 is an SMBus compliant fan controller with up to five
controlled PWM fan drivers. All fan drivers are controlled by a
programmable frequency PWM driver and Fan Speed Control algorithm that
operates as a directly PWM-controlled device.

The closed loop Fan Speed Control algorithm (FSC) has the capability to
detect aging fans and alert the system. It will likewise detect stalled
or locked fans and trigger an interrupt.

EMC2305 offers a clock output so that multiple devices may be chained
and slaved to the same clock source for optimal performance in large
distributed systems.

Signed-off-by: Michael Shych <michaelsh@nvidia.com>
---
 drivers/hwmon/Kconfig   |  12 +
 drivers/hwmon/Makefile  |   1 +
 drivers/hwmon/emc2305.c | 522 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 535 insertions(+)
 create mode 100644 drivers/hwmon/emc2305.c

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index f741c7492ee4..93d0313aa210 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1601,6 +1601,18 @@ config SENSORS_EMC2103
 	  This driver can also be built as a module. If so, the module
 	  will be called emc2103.
 
+config SENSORS_EMC2305
+	tristate "SMSC EMC2305"
+	depends on I2C && OF
+	help
+	  If you say yes here you get support for the SMSC EMC2305
+	  fan controller chips.
+	  The SMSC EMC2305 is a fan controller for up to 5 fans.
+	  Fan rotation speeds are reported in RPM.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called emc2305.
+
 config SENSORS_EMC6W201
 	tristate "SMSC EMC6W201"
 	depends on I2C
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index 9db2903b61e5..644a7e6eeae6 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -66,6 +66,7 @@ obj-$(CONFIG_SENSORS_DS620)	+= ds620.o
 obj-$(CONFIG_SENSORS_DS1621)	+= ds1621.o
 obj-$(CONFIG_SENSORS_EMC1403)	+= emc1403.o
 obj-$(CONFIG_SENSORS_EMC2103)	+= emc2103.o
+obj-$(CONFIG_SENSORS_EMC2305)	+= emc2305.o
 obj-$(CONFIG_SENSORS_EMC6W201)	+= emc6w201.o
 obj-$(CONFIG_SENSORS_F71805F)	+= f71805f.o
 obj-$(CONFIG_SENSORS_F71882FG)	+= f71882fg.o
diff --git a/drivers/hwmon/emc2305.c b/drivers/hwmon/emc2305.c
new file mode 100644
index 000000000000..04bc9f658d85
--- /dev/null
+++ b/drivers/hwmon/emc2305.c
@@ -0,0 +1,522 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Hardware monitoring driver for EMC2305 fan controller
+ *
+ * Copyright (C) 2021 Nvidia Technologies Ltd and Delta Networks, Inc.
+ */
+
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/thermal.h>
+#include <linux/version.h>
+
+static const unsigned short
+emc2305_normal_i2c[] = { 0x27, 0x2c, 0x2d, 0x2e, 0x2f, 0x4c, 0x4d, I2C_CLIENT_END };
+
+#define EMC2305_REG_DRIVE_FAIL_STATUS	0x27
+#define EMC2305_REG_DEVICE		0xfd
+#define EMC2305_REG_VENDOR		0xfe
+#define EMC2305_FAN_MAX_NUM		5
+#define EMC2305_FAN_MAX			0xff	/*100%*/
+#define EMC2305_FAN_MIN			0x00	/*0%*/
+#define EMC2305_FAN_MAX_STATE		10
+#define EMC2305_DEVICE			0x34
+#define EMC2305_VENDOR			0x5d
+#define EMC2305_REG_PRODUCT_ID		0xfd
+#define EMC2305_TACH_REGS_UNUSE_BITS	3
+#define EMC2305_TACH_CNT_MULTIPLIER	0x02
+#define EMC2305_TACH_RANGE_MIN		480
+
+/*
+ * Factor by equations [2] and [3] from data sheet; valid for fans where the number of edges
+ * equal (poles * 2 + 1).
+ */
+#define EMC2305_RPM_FACTOR		3932160
+
+#define EMC2305_REG_FAN_DRIVE(n) (0x30 + 0x10 * (n))
+#define EMC2305_REG_FAN_MIN_DRIVE(n) (0x38 + 0x10 * (n))
+#define EMC2305_REG_FAN_TACH(n) (0x3e + 0x10 * (n))
+
+enum emc230x_product_id {
+	EMC2305 = 0x34,
+	EMC2303 = 0x35,
+	EMC2302 = 0x36,
+	EMC2301 = 0x37,
+};
+
+static const struct i2c_device_id emc2305_ids[] = {
+	{ "emc2305", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, emc2305_ids);
+
+static const struct of_device_id emc2305_dt_ids[] = {
+	{ .compatible = "smsc,emc2305" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, emc2305_dt_ids);
+
+struct emc2305_data {
+	struct thermal_cooling_device *cdev;
+	struct i2c_client *client;
+	struct device *hwmon_dev;
+	u8 max_state;
+	u8 max_pwm;
+	u8 min_pwm;
+	unsigned int cur_state;
+	unsigned int pwm_num;
+	unsigned int max_cfg_state;
+	unsigned int min_cfg_state;
+	u8 cooling_levels[];
+};
+
+static int emc2305_get_cur_state(struct thermal_cooling_device *cdev, unsigned long *state)
+{
+	struct emc2305_data *data = cdev->devdata;
+	*state = data->cur_state;
+	return 0;
+}
+
+static int emc2305_get_max_state(struct thermal_cooling_device *cdev, unsigned long *state)
+{
+	struct emc2305_data *data = cdev->devdata;
+	*state = data->max_state;
+	return 0;
+}
+
+static int emc2305_set_cur_state(struct thermal_cooling_device *cdev, unsigned long state)
+{
+	struct emc2305_data *data = cdev->devdata;
+	struct i2c_client *client = data->client;
+	unsigned long cur_state;
+	bool config = false;
+	unsigned long val;
+	int i;
+
+	/*
+	 * Verify if this request is for changing allowed FAN dynamical
+	 * minimum. If it is - update cooling levels accordingly and update
+	 * state, if current state is below the newly requested minimum state.
+	 * For example, if current state is 5, and minimal state is to be
+	 * changed from 4 to 6, fan->cooling_levels[0 to 5] will be changed all
+	 * from 4 to 6. And state 5 (fan->cooling_levels[4]) should be
+	 * overwritten.
+	 */
+	if (state > (data->max_state + data->min_cfg_state) &&
+	    state <= (data->max_state * 2)) {
+		config = true;
+
+		state -= data->max_state;
+		for (i = 0; i < state; i++)
+			data->cooling_levels[i] = state;
+		for (i = state; i <= data->max_state; i++)
+			data->cooling_levels[i] = i;
+
+		cur_state = data->cur_state;
+		if (state < cur_state)
+			return 0;
+
+		state = cur_state;
+	}
+
+	if (state > data->max_state)
+		return -EINVAL;
+
+	val = data->cooling_levels[state] * EMC2305_FAN_MAX / data->max_state;
+	if (val > EMC2305_FAN_MAX)
+		return -EINVAL;
+
+	for (i = 0; i < data->pwm_num; i++)
+		i2c_smbus_write_byte_data(client, EMC2305_REG_FAN_DRIVE(i), val);
+	data->cur_state = data->cooling_levels[state];
+	return (config) ? 1 : 0;
+}
+
+static const struct thermal_cooling_device_ops fan_cooling_ops = {
+	.get_max_state = emc2305_get_max_state,
+	.get_cur_state = emc2305_get_cur_state,
+	.set_cur_state = emc2305_set_cur_state,
+};
+
+static int emc2305_show_fault(struct device *dev, int channel)
+{
+	struct emc2305_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int status_reg;
+
+	status_reg = i2c_smbus_read_byte_data(client, EMC2305_REG_DRIVE_FAIL_STATUS);
+
+	return status_reg & (1 << channel) ? 1 : 0;
+}
+
+static int emc2305_show_fan(struct device *dev, int channel)
+{
+	struct emc2305_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int ret;
+
+	ret = i2c_smbus_read_word_swapped(client, EMC2305_REG_FAN_TACH(channel));
+	if (ret <= 0)
+		return ret;
+
+	ret = ret >> EMC2305_TACH_REGS_UNUSE_BITS;
+	ret = EMC2305_RPM_FACTOR / ret;
+	if (ret <= EMC2305_TACH_RANGE_MIN)
+		return 0;
+
+	return ret * EMC2305_TACH_CNT_MULTIPLIER;
+}
+
+static int emc2305_show_pwm(struct device *dev, int channel)
+{
+	struct emc2305_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int val_max = 0;
+	int ret, i;
+
+	for (i = 0; i < data->pwm_num; i++) {
+		ret = i2c_smbus_read_byte_data(client, EMC2305_REG_FAN_DRIVE(i));
+		if (ret < 0)
+			return ret;
+		val_max = val_max > ret ? val_max : ret;
+	}
+	return val_max;
+}
+
+static int emc2305_set_pwm(struct device *dev, long val)
+{
+	struct emc2305_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int i;
+
+	if (val < data->min_pwm || val > data->max_pwm)
+		return -EINVAL;
+
+	for (i = 0; i < data->pwm_num; i++)
+		i2c_smbus_write_byte_data(client, EMC2305_REG_FAN_DRIVE(i), val);
+	data->cur_state = val * data->max_state / data->max_pwm;
+	return 0;
+}
+
+static int _emc2305_set_pwm(struct device *dev, u8 max_pwm)
+{
+	long val = max_pwm;
+
+	return emc2305_set_pwm(dev, val);
+}
+
+static int emc2305_get_tz_of(struct device *dev, u8 *min_pwm, u8 *max_pwm, u8 *max_state)
+{
+	struct device_node *np = dev->of_node;
+	const char *int_str;
+	int ret;
+
+	ret = of_property_read_string(np, "emc2305,cooling-levels",  &int_str);
+	if (ret == 0)
+		ret = ret < 0 ? ret : kstrtou8(int_str, 0, max_state);
+	ret = of_property_read_string(np, "emc2305,max-pwm",  &int_str);
+	if (ret == 0)
+		ret = ret < 0 ? ret : kstrtou8(int_str, 0, max_pwm);
+	ret = of_property_read_string(np, "emc2305,min-pwm",  &int_str);
+	if (ret == 0)
+		ret = ret < 0 ? ret : kstrtou8(int_str, 0, min_pwm);
+	return ret;
+}
+
+static int emc2305_set_tz(struct device *dev)
+{
+	struct emc2305_data *data = dev_get_drvdata(dev);
+	int i, ret;
+
+	_emc2305_set_pwm(dev, data->max_pwm);
+	data->cur_state = data->max_state;
+	data->max_cfg_state = data->max_pwm * data->max_state / data->max_pwm;
+	data->min_cfg_state = data->min_pwm * data->max_state / data->max_pwm;
+	/* Init cooling levels per PWM state. */
+	for (i = 0; i < data->min_cfg_state; i++)
+		data->cooling_levels[i] = data->min_cfg_state;
+	for (i = data->min_cfg_state; i <= data->max_state; i++)
+		data->cooling_levels[i] = i;
+
+	if (dev->of_node)
+		data->cdev = devm_thermal_of_cooling_device_register(dev, dev->of_node, "emc2305",
+								     data, &fan_cooling_ops);
+	else
+		data->cdev = thermal_cooling_device_register("emc2305", data, &fan_cooling_ops);
+	if (IS_ERR(data->cdev)) {
+		dev_err(dev, "Failed to register cooling device\n");
+		ret = PTR_ERR(data->cdev);
+		goto thermal_cooling_device_register_fail;
+	}
+	return 0;
+
+thermal_cooling_device_register_fail:
+	return ret;
+}
+
+static void emc2305_unset_tz(struct device *dev)
+{
+	struct emc2305_data *data = dev_get_drvdata(dev);
+
+	if (!dev->of_node)
+		thermal_cooling_device_unregister(data->cdev);
+}
+
+static umode_t
+emc2305_is_visible(const void *data, enum hwmon_sensor_types type, u32 attr, int channel)
+{
+	/* Skip channels which are not physically connected. */
+	if (((struct emc2305_data *)data)->pwm_num < channel + 1)
+		return 0;
+	switch (type) {
+	case hwmon_fan:
+		switch (attr) {
+		case hwmon_fan_input:
+			return 0444;
+		case hwmon_fan_fault:
+			return 0444;
+		default:
+			break;
+		}
+		break;
+	case hwmon_pwm:
+		switch (attr) {
+		case hwmon_pwm_input:
+			return 0644;
+		default:
+			break;
+		}
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+};
+
+static int
+emc2305_write(struct device *dev, enum hwmon_sensor_types type, u32 attr, int channel, long val)
+{
+	switch (type) {
+	case hwmon_pwm:
+		switch (attr) {
+		case hwmon_pwm_input:
+			return emc2305_set_pwm(dev, val);
+		default:
+			break;
+		}
+		break;
+	default:
+		break;
+	}
+
+	return -EOPNOTSUPP;
+};
+
+static int
+emc2305_read(struct device *dev, enum hwmon_sensor_types type, u32 attr, int channel, long *val)
+{
+	int ret;
+
+	switch (type) {
+	case hwmon_fan:
+		switch (attr) {
+		case hwmon_fan_input:
+			ret = emc2305_show_fan(dev, channel);
+			if (ret < 0)
+				return ret;
+			*val = ret;
+			return 0;
+		case hwmon_fan_fault:
+			ret = emc2305_show_fault(dev, channel);
+			if (ret < 0)
+				return ret;
+			*val = ret;
+			return 0;
+		default:
+			break;
+		}
+		break;
+	case hwmon_pwm:
+		switch (attr) {
+		case hwmon_pwm_input:
+			ret = emc2305_show_pwm(dev, channel);
+			if (ret < 0)
+				return ret;
+			*val = ret;
+			return 0;
+		default:
+			break;
+		}
+		break;
+	default:
+		break;
+	}
+
+	return -EOPNOTSUPP;
+};
+
+static const struct hwmon_ops emc2305_ops = {
+	.is_visible = emc2305_is_visible,
+	.read = emc2305_read,
+	.write = emc2305_write,
+};
+
+static const struct hwmon_channel_info *emc2305_info[] = {
+	HWMON_CHANNEL_INFO(fan,
+			   HWMON_F_INPUT,
+			   HWMON_F_INPUT,
+			   HWMON_F_INPUT,
+			   HWMON_F_INPUT,
+			   HWMON_F_INPUT
+			   ),
+	HWMON_CHANNEL_INFO(fan,
+			   HWMON_F_FAULT,
+			   HWMON_F_FAULT,
+			   HWMON_F_FAULT,
+			   HWMON_F_FAULT,
+			   HWMON_F_FAULT
+			   ),
+	HWMON_CHANNEL_INFO(pwm,
+			   HWMON_PWM_INPUT,
+			   HWMON_PWM_INPUT,
+			   HWMON_PWM_INPUT,
+			   HWMON_PWM_INPUT,
+			   HWMON_PWM_INPUT
+			   ),
+	NULL
+};
+
+static const struct hwmon_chip_info emc2305_chip_info = {
+	.ops = &emc2305_ops,
+	.info = emc2305_info,
+};
+
+static int emc2305_identify(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct emc2305_data *data = i2c_get_clientdata(client);
+	int ret;
+
+	ret = i2c_smbus_read_byte_data(client, EMC2305_REG_PRODUCT_ID);
+	if (ret < 0)
+		return ret;
+
+	switch (ret) {
+	case EMC2305:
+		data->pwm_num = 5;
+		break;
+	case EMC2303:
+		data->pwm_num = 5;
+		break;
+	case EMC2302:
+		data->pwm_num = 2;
+		break;
+	case EMC2301:
+		data->pwm_num = 1;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int emc2305_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct i2c_adapter *adapter = client->adapter;
+	struct device *dev = &client->dev;
+	u8 min_pwm, max_pwm, max_state;
+	struct emc2305_data *data;
+	int vendor, device;
+	int ret;
+	int i;
+
+	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA | I2C_FUNC_SMBUS_WORD_DATA))
+		return -ENODEV;
+
+	vendor = i2c_smbus_read_byte_data(client, EMC2305_REG_VENDOR);
+	if (vendor != EMC2305_VENDOR)
+		return -ENODEV;
+
+	device = i2c_smbus_read_byte_data(client, EMC2305_REG_DEVICE);
+	if (device != EMC2305_DEVICE)
+		return -ENODEV;
+
+	max_state = EMC2305_FAN_MAX_STATE;
+	max_pwm = EMC2305_FAN_MAX;
+	min_pwm = EMC2305_FAN_MIN;
+	if (dev->of_node) {
+		ret = emc2305_get_tz_of(dev, &min_pwm, &max_pwm, &max_state);
+		if (ret < 0)
+			return ret;
+	}
+
+	data = devm_kzalloc(dev, struct_size(data, cooling_levels, max_state + 1), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	i2c_set_clientdata(client, data);
+
+	ret = emc2305_identify(dev);
+	if (ret)
+		return ret;
+
+	data->client = client;
+	data->max_state = max_state;
+	data->min_pwm = min_pwm;
+	data->max_pwm = max_pwm;
+
+	data->hwmon_dev = devm_hwmon_device_register_with_info(dev, "emc2305", data,
+							       &emc2305_chip_info, NULL);
+	if (IS_ERR(data->hwmon_dev)) {
+		ret = PTR_ERR(data->hwmon_dev);
+		goto hwmon_device_register_with_info_fail;
+	}
+
+	if (IS_REACHABLE(CONFIG_THERMAL)) {
+		ret = emc2305_set_tz(dev);
+		if (ret != 0)
+			goto emc2305_set_tz_fail;
+	}
+
+	for (i = 0; i < EMC2305_FAN_MAX_NUM; i++)
+		i2c_smbus_write_byte_data(client, EMC2305_REG_FAN_MIN_DRIVE(i), data->min_pwm);
+
+	return 0;
+
+emc2305_set_tz_fail:
+hwmon_device_register_with_info_fail:
+	return ret;
+}
+
+static int emc2305_remove(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+
+	if (IS_REACHABLE(CONFIG_THERMAL))
+		emc2305_unset_tz(dev);
+	return 0;
+}
+
+static struct i2c_driver emc2305_driver = {
+	.class  = I2C_CLASS_HWMON,
+	.driver = {
+		.name = "emc2305",
+		.of_match_table = emc2305_dt_ids,
+	},
+	.probe    = emc2305_probe,
+	.remove	  = emc2305_remove,
+	.id_table = emc2305_ids,
+	.address_list = emc2305_normal_i2c,
+};
+
+module_i2c_driver(emc2305_driver);
+
+MODULE_AUTHOR("Claud Chang <claud.chang@deltaww.com>");
+MODULE_DESCRIPTION("SMSC EMC2305 fan controller driver");
+MODULE_LICENSE("GPL");
-- 
2.20.1

